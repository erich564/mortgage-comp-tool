{"version":3,"file":"static/js/969.2a797a3d.chunk.js","mappings":"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","sources":["ChartOptions.js","Report.js"],"sourcesContent":["import Color from 'color';\r\nimport Highcharts from 'highcharts';\r\nimport moment from 'moment';\r\nimport merge from './Merge';\r\n\r\nconst yAxisLabelFormat = '${value:,.0f}';\r\n\r\nconst colors = {\r\n  red: '#b84c3e',\r\n  green: '#86a542',\r\n  blue: '#6881d8',\r\n  gold: '#c18739',\r\n  purple: '#8650a6',\r\n  teal: '#50b47b',\r\n  pink: '#b84c7d',\r\n  grey: '#888',\r\n};\r\n\r\nfor (const c in colors) {\r\n  const lightenPct = 0.4;\r\n  const darkenPct = 0.25;\r\n  const color = Color(colors[c]);\r\n  colors[`${c}s`] = [\r\n    color.lighten(lightenPct).hex(),\r\n    color.darken(darkenPct).hex(),\r\n  ];\r\n}\r\n\r\nHighcharts.setOptions({\r\n  lang: {\r\n    thousandsSep: ',',\r\n  },\r\n});\r\n\r\nlet commonOptions;\r\n\r\n/**\r\n * Determines min/max dates that will cover both mortgage amortization time periods.\r\n * Then adds some padding to those dates so the data is not pushing up against the\r\n * ends of the chart.\r\n */\r\nconst calcMinMaxDates = mortgages => {\r\n  const m1 = mortgages[0];\r\n  const m2 = mortgages[1];\r\n  const minDate = moment.min(m1.startDate, m2.startDate).clone();\r\n  const maxDate = moment.max(m1.endDate, m2.endDate).clone();\r\n  const diff = maxDate.diff(minDate, 'days');\r\n  const margin = 0.02;\r\n  const padding = diff * margin;\r\n  minDate.subtract(padding, 'days');\r\n  maxDate.add(padding, 'days');\r\n  return { minDate, maxDate };\r\n};\r\n\r\n/**\r\n * Vertical lines on the graphs.\r\n */\r\nconst makePlotLines = (minDate, maxDate) => {\r\n  const yearsBetweenLines = 5;\r\n  const arr = [];\r\n  const date = minDate.clone().add(1, 'year').startOf('year');\r\n  while (date.year() % yearsBetweenLines !== 0) date.add(1, 'year');\r\n  while (date.isBefore(maxDate)) {\r\n    arr.push({\r\n      color: '#EEE',\r\n      width: 1,\r\n      value: date.valueOf(),\r\n      zIndex: 2,\r\n    });\r\n    date.add(yearsBetweenLines, 'year');\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport const setCommonOptions = mortgages => {\r\n  const { minDate, maxDate } = calcMinMaxDates(mortgages);\r\n  const plotLines = makePlotLines(minDate, maxDate);\r\n\r\n  commonOptions = {\r\n    chart: {\r\n      type: 'spline',\r\n      zoomType: 'x',\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        states: {\r\n          hover: {\r\n            lineWidthPlus: 0,\r\n          },\r\n          inactive: {\r\n            enabled: false,\r\n          },\r\n        },\r\n        marker: {\r\n          radius: 2,\r\n        },\r\n      },\r\n    },\r\n    xAxis: {\r\n      type: 'datetime',\r\n      min: minDate.valueOf(),\r\n      max: maxDate.valueOf(),\r\n      plotLines,\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: null,\r\n      },\r\n      labels: {\r\n        format: yAxisLabelFormat,\r\n      },\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      crosshairs: true,\r\n      // xDateFormat: '%b %Y',\r\n      xDateFormat: '%m-%Y',\r\n      headerFormat: '{point.key}<br/>',\r\n      valuePrefix: '$',\r\n    },\r\n  };\r\n};\r\n\r\nexport const createNetWorthChartOptions = (comparison, mortgages) =>\r\n  merge(commonOptions, {\r\n    title: {\r\n      text: 'Net Worth',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Difference',\r\n        data: comparison.map(c => ({\r\n          x: c.unixTimeMs,\r\n          y: c.difference,\r\n        })),\r\n        color: colors.grey,\r\n      },\r\n      ...mortgages.map((m, n) => ({\r\n        name: `${m.name} Net Worth`,\r\n        data: m.netWorth.map(nw => ({\r\n          x: nw.unixTimeMs,\r\n          y: nw.netWorth,\r\n        })),\r\n        color: colors.blues[n],\r\n      })),\r\n    ],\r\n    tooltip: {\r\n      valueDecimals: 0,\r\n    },\r\n  });\r\n\r\nexport const createCashEquityChartOptions = mortgages =>\r\n  merge(commonOptions, {\r\n    title: {\r\n      text: 'Cash & Equity',\r\n    },\r\n    series: [\r\n      ...mortgages.map((m, n) => ({\r\n        name: `${m.name} Cash`,\r\n        data: m.netWorth.map(nw => ({\r\n          x: nw.unixTimeMs,\r\n          y: nw.cash,\r\n        })),\r\n        color: colors.teals[n],\r\n      })),\r\n      ...mortgages.map((m, n) => ({\r\n        name: `${m.name} Equity`,\r\n        data: m.netWorth.map(nw => ({\r\n          x: nw.unixTimeMs,\r\n          y: nw.equity,\r\n        })),\r\n        color: colors.golds[n],\r\n      })),\r\n    ],\r\n    tooltip: {\r\n      valueDecimals: 0,\r\n    },\r\n  });\r\n\r\nexport const createInterestChartOptions = mortgages => ({\r\n  chart: {\r\n    type: 'column',\r\n  },\r\n  title: {\r\n    text: `Mortgage Interest By Year`,\r\n  },\r\n  plotOptions: {\r\n    column: {\r\n      groupPadding: 0,\r\n      pointPadding: 0,\r\n    },\r\n    series: {\r\n      states: {\r\n        inactive: {\r\n          enabled: false,\r\n        },\r\n        hover: false,\r\n      },\r\n    },\r\n  },\r\n  series: [\r\n    ...mortgages.map((m, n) => ({\r\n      name: `${m.name} Interest`,\r\n      data: m.interestByYear.map(i => ({\r\n        name: i.year,\r\n        y: i.interest,\r\n      })),\r\n      color: colors.reds[n],\r\n    })),\r\n  ],\r\n  xAxis: {\r\n    type: 'category',\r\n    categories: [\r\n      ...new Set(mortgages.map(m => m.interestByYear.map(i => i.year)).flat()),\r\n    ],\r\n  },\r\n  yAxis: {\r\n    title: {\r\n      text: null,\r\n    },\r\n    labels: {\r\n      format: yAxisLabelFormat,\r\n    },\r\n  },\r\n  tooltip: {\r\n    valueDecimals: 0,\r\n    headerFormat: '{point.key}<br/>',\r\n    shared: true,\r\n    valuePrefix: '$',\r\n  },\r\n});\r\n\r\nexport const createAmortizationChartOptions = m =>\r\n  merge(commonOptions, {\r\n    title: {\r\n      text: `${m.name} Amortization`,\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Principal',\r\n        data: m.payments.map(payment => ({\r\n          x: payment.unixTimeMs,\r\n          y: payment.principal,\r\n        })),\r\n        color: colors.green,\r\n      },\r\n      {\r\n        name: 'Interest',\r\n        data: m.payments.map(payment => ({\r\n          x: payment.unixTimeMs,\r\n          y: payment.interest,\r\n        })),\r\n        color: colors.red,\r\n      },\r\n    ],\r\n    tooltip: {\r\n      valueDecimals: 2,\r\n    },\r\n  });\r\n","/* eslint-disable react/style-prop-object */\r\nimport { Divider, Table, TableBody, TableCell, TableRow } from '@mui/material';\r\nimport clone from 'clone';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Fragment, memo } from 'react';\r\nimport {\r\n  createAmortizationChartOptions,\r\n  createCashEquityChartOptions,\r\n  createInterestChartOptions,\r\n  createNetWorthChartOptions,\r\n  setCommonOptions,\r\n} from './ChartOptions';\r\nimport MortgageTerm from './MortgageTerm';\r\nimport MortgageType from './MortgageType';\r\n\r\nconst monthsPerYear = 12;\r\n\r\nconst locale = 'en-US';\r\n\r\n/**\r\n * Convert annual rate to monthly rate (with monthly compounding).\r\n */\r\nconst calcMonthlyRoi = n => (1 + n) ** (1 / monthsPerYear) - 1;\r\n\r\n/** Round to 2 decimal places */\r\n// eslint-disable-next-line prefer-template\r\nconst roundToTwo = num => +(Math.round(+`${num}e+2`) + 'e-2');\r\n\r\n/**\r\n * Calculate monthly loan payment amount\r\n * @param {number} p Remaining principal for the loan.\r\n * @param {number} i Monthly interest rate.\r\n * @param {number} t Remaining months for the loan. (term)\r\n */\r\nconst calcMonthlyPayment = (p, i, t) => {\r\n  const x = (1 + i) ** t;\r\n  return roundToTwo((p * (i * x)) / (x - 1));\r\n};\r\n\r\nconst transformState = reportState => {\r\n  const state = clone(reportState);\r\n  state.roi /= 100;\r\n  state.monthlyRoi = calcMonthlyRoi(state.roi);\r\n  state.marginalTaxRate /= 100;\r\n  for (const m of state.mortgages) {\r\n    m.name = `Mortgage ${m.id}`;\r\n    m.interestRate /= 100;\r\n    m.loanAmount = +m.loanAmount;\r\n    m.termMonths = MortgageTerm.props[m.term].months;\r\n    m.endDate = m.startDate.clone().add(m.termMonths - 1, 'months');\r\n    if (m.type !== MortgageType.FixedRate) {\r\n      const years = MortgageType.props[m.type].yearsFixed;\r\n      const intRate = m.interestRateAdjusted / 100;\r\n      m.rateAdjust = {\r\n        interestRate: intRate,\r\n        monthlyInterestRate: intRate / monthsPerYear,\r\n        adjustDate: m.startDate.clone().add(years, 'years'),\r\n      };\r\n    }\r\n    m.monthlyInterestRate = m.interestRate / monthsPerYear;\r\n    m.monthlyPayment = calcMonthlyPayment(\r\n      m.loanAmount,\r\n      m.monthlyInterestRate,\r\n      m.termMonths\r\n    );\r\n    m.payments = [];\r\n    m.netWorth = [];\r\n    m.closingCosts = +m.closingCosts;\r\n    delete m.interestRateAdjusted;\r\n  }\r\n  return state;\r\n};\r\n\r\n/**\r\n * Builds amortization schedule for a mortgages, with each payment's principal\r\n * and interest portions.\r\n */\r\nconst createAmortizationSchedules = mortgages => {\r\n  for (const m of mortgages) {\r\n    let b = m.loanAmount;\r\n    let intRate = m.monthlyInterestRate;\r\n    const date = m.startDate.clone();\r\n    let { monthlyPayment } = m;\r\n    while (b > 0) {\r\n      const int = roundToTwo(b * intRate);\r\n      let prin;\r\n      // on the very last payment, pay off remaining balance due to rounding over time\r\n      if (date.isSame(m.endDate)) {\r\n        prin = b;\r\n      } else {\r\n        prin = roundToTwo(monthlyPayment - int);\r\n      }\r\n      const bStart = roundToTwo(b);\r\n      const bEnd = roundToTwo(bStart - prin);\r\n      b = bEnd;\r\n      const payment = {\r\n        principal: prin,\r\n        interest: int,\r\n        date: date.clone(),\r\n        unixTimeMs: date.valueOf(),\r\n        startingBalance: bStart,\r\n        remainingBalance: bEnd,\r\n      };\r\n      m.payments.push(payment);\r\n      date.add(1, 'month');\r\n      if (m.rateAdjust && date.isSame(m.rateAdjust.adjustDate)) {\r\n        intRate = m.rateAdjust.monthlyInterestRate;\r\n        const t =\r\n          m.termMonths - m.rateAdjust.adjustDate.diff(m.startDate, 'months');\r\n        monthlyPayment = calcMonthlyPayment(b, intRate, t);\r\n        m.rateAdjust.monthlyPayment = monthlyPayment;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Creates data for comparing cash, equity, and net worth comparisons of the two\r\n * mortgages over their life time.\r\n */\r\nconst compareMortgages = ({\r\n  mortgages,\r\n  isRefinance,\r\n  doItemize,\r\n  marginalTaxRate,\r\n  monthlyRoi,\r\n}) => {\r\n  let m1 = mortgages[0];\r\n  let m2 = mortgages[1];\r\n  const isM2StartDateBeforeM1 = m2.startDate.isBefore(m1.startDate);\r\n  if (isM2StartDateBeforeM1) {\r\n    [m1, m2] = [m2, m1];\r\n  }\r\n  let m1n = 0;\r\n  let m2n = 0;\r\n  const m1PayLen = m1.payments.length;\r\n  const m2PayLen = m2.payments.length;\r\n\r\n  // fast-forward m1 payment schedule to first payment date of m2\r\n  while (m1.payments[m1n] && !m1.payments[m1n].date.isSame(m2.startDate)) m1n++;\r\n\r\n  let m1Cash;\r\n  let m2Cash;\r\n  let m1Equity = 0;\r\n  let m2Equity;\r\n\r\n  if (isRefinance) {\r\n    m1Cash = 0;\r\n    m2Cash = roundToTwo(\r\n      m2.loanAmount - m1.payments[m1n].startingBalance - m2.closingCosts\r\n    );\r\n    m2Equity = -m2Cash;\r\n  } else {\r\n    m1Cash = -m1.closingCosts;\r\n    m2Cash = -m2.closingCosts;\r\n    m2Equity = 0;\r\n  }\r\n\r\n  const netWorthDifferences = [];\r\n  // insert an additional data point before first payment date\r\n  (() => {\r\n    const m1NetWorth = m1Cash + m1Equity;\r\n    const m2NetWorth = m2Cash + m2Equity;\r\n    const unixTimeMs = m1.payments[m1n].date.subtract(1, 'month').valueOf();\r\n    m1.netWorth.push({\r\n      unixTimeMs,\r\n      cash: m1Cash,\r\n      equity: m1Equity,\r\n      netWorth: m1NetWorth,\r\n    });\r\n    m2.netWorth.push({\r\n      unixTimeMs,\r\n      cash: m2Cash,\r\n      equity: m2Equity,\r\n      netWorth: m2NetWorth,\r\n    });\r\n    netWorthDifferences.push({\r\n      unixTimeMs,\r\n      difference: m2NetWorth - m1NetWorth,\r\n    });\r\n  })();\r\n\r\n  let m1PrevCash = m1Cash;\r\n  let m2PrevCash = m2Cash;\r\n  let m1Payment = m1.monthlyPayment;\r\n  let m2Payment = m2.monthlyPayment;\r\n\r\n  while (m1n < m1PayLen || m2n < m2PayLen) {\r\n    const eitherPayment = m1n < m1PayLen ? m1.payments[m1n] : m2.payments[m2n];\r\n    const { date } = eitherPayment;\r\n    const { unixTimeMs } = eitherPayment;\r\n    let m1NetWorth;\r\n    let m2NetWorth;\r\n\r\n    if (m1n < m1PayLen) {\r\n      if (m1.rateAdjust && date.isSame(m1.rateAdjust.adjustDate))\r\n        m1Payment = m1.rateAdjust.monthlyPayment;\r\n      const accruedInt = m1PrevCash === undefined ? 0 : m1PrevCash * monthlyRoi;\r\n      m1Cash = m1Cash - m1Payment + accruedInt;\r\n      if (doItemize) {\r\n        m1Cash += m1.payments[m1n].interest * marginalTaxRate;\r\n      }\r\n      m1Equity += m1.payments[m1n].principal;\r\n      m1NetWorth = roundToTwo(m1Cash + m1Equity);\r\n      m1.netWorth.push({\r\n        unixTimeMs,\r\n        cash: m1Cash,\r\n        equity: m1Equity,\r\n        netWorth: m1NetWorth,\r\n      });\r\n      m1PrevCash = m1Cash;\r\n      m1n++;\r\n    }\r\n\r\n    if (m2n < m2PayLen) {\r\n      if (m2.rateAdjust && date.isSame(m2.rateAdjust.adjustDate))\r\n        m2Payment = m2.rateAdjust.monthlyPayment;\r\n      const accruedInt = m2PrevCash === undefined ? 0 : m2PrevCash * monthlyRoi;\r\n      m2Cash = m2Cash - m2Payment + accruedInt;\r\n      if (doItemize) {\r\n        m2Cash += m2.payments[m2n].interest * marginalTaxRate;\r\n      }\r\n      m2Equity += m2.payments[m2n].principal;\r\n      m2NetWorth = m2Cash + m2Equity;\r\n      m2.netWorth.push({\r\n        unixTimeMs,\r\n        cash: m2Cash,\r\n        equity: m2Equity,\r\n        netWorth: m2NetWorth,\r\n      });\r\n      m2PrevCash = m2Cash;\r\n      m2n++;\r\n    }\r\n\r\n    if (m1NetWorth !== null && m2NetWorth !== null) {\r\n      netWorthDifferences.push({\r\n        unixTimeMs,\r\n        difference: m2NetWorth - m1NetWorth,\r\n      });\r\n    }\r\n  }\r\n\r\n  return netWorthDifferences;\r\n};\r\n\r\nconst calcMortgageInterestByYear = mortgages => {\r\n  for (const m of mortgages) {\r\n    m.interestByYear = [];\r\n    let interest = 0;\r\n    let prevYear;\r\n    for (const p of m.payments) {\r\n      const newYear = p.date.year();\r\n      if (prevYear && prevYear !== newYear) {\r\n        m.interestByYear.push({\r\n          year: prevYear,\r\n          interest: roundToTwo(interest),\r\n        });\r\n        interest = 0;\r\n      }\r\n      interest += p.interest;\r\n      prevYear = newYear;\r\n    }\r\n  }\r\n};\r\n\r\nfunction Report({ reportState }) {\r\n  const state = transformState(reportState);\r\n  createAmortizationSchedules(state.mortgages);\r\n  const comparison = compareMortgages(state);\r\n  calcMortgageInterestByYear(state.mortgages);\r\n  setCommonOptions(state.mortgages);\r\n\r\n  const tableCellStyle = {\r\n    border: 0,\r\n    fontSize: 'initial',\r\n    padding: 1,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Divider variant=\"middle\" />\r\n      <br />\r\n      <br />\r\n      <Table sx={{ width: 'fit-content', margin: 'auto !important' }}>\r\n        {state.mortgages.map(m => (\r\n          <Fragment key={m.id}>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell\r\n                  sx={{\r\n                    ...tableCellStyle,\r\n                    verticalAlign: 'top',\r\n                    whiteSpace: 'nowrap',\r\n                  }}\r\n                >\r\n                  Mortgage {m.id}:\r\n                </TableCell>\r\n                <TableCell sx={tableCellStyle}>\r\n                  ${m.loanAmount.toLocaleString(locale)} at{' '}\r\n                  {m.interestRate * 100}% for\r\n                  {m.type === MortgageType.FixedRate\r\n                    ? ` ${MortgageTerm.props[m.term].name}.`\r\n                    : ` the first ${m.rateAdjust.adjustDate.diff(\r\n                        m.startDate,\r\n                        'years'\r\n                      )} years, then ${\r\n                        m.rateAdjust.interestRate * 100\r\n                      }% for the remaining duration of the loan.`}\r\n                  <br />\r\n                  Monthly payment\r\n                  {m.type === MortgageType.FixedRate\r\n                    ? ` is $${m.monthlyPayment.toLocaleString(locale)}.`\r\n                    : ` starts at $${m.monthlyPayment.toLocaleString(\r\n                        locale\r\n                      )}, and then changes to $${m.rateAdjust.monthlyPayment.toLocaleString(\r\n                        locale\r\n                      )} on ${m.rateAdjust.adjustDate.format('MM-DD-YYYY')}.`}\r\n                  <br />\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Fragment>\r\n        ))}\r\n      </Table>\r\n      <br />\r\n      The difference in net worths is the bottom-line takeaway for this tool.\r\n      Note that you can zoom in on graphs by clicking and dragging. You also can\r\n      show/hide lines by clicking on their legend entries.\r\n      <br />\r\n      <br />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={createNetWorthChartOptions(comparison, state.mortgages)}\r\n      />\r\n      <p>\r\n        The Net Worth graph shows how Mortgage 1 and Mortgage 2 compare in value\r\n        over time. Net Worth is defined here as Cash plus Equity. See below. The\r\n        Difference graph line values are simply &quot;Mortgage 2 Net Worth&quot;\r\n        minus &quot;Mortgage 1 Net Worth.&quot;\r\n      </p>\r\n      <br />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={createCashEquityChartOptions(state.mortgages)}\r\n      />\r\n      <p>\r\n        For each monthly mortgage payment made, Cash goes down by that amount.\r\n        Equity goes up by the principal portion of the payment. Cash has\r\n        additional value over time, as it can be invested. To account for the\r\n        time value of money, each month Cash is multiplied by a monthly ROI\r\n        value (which is derived from the yearly ROI value supplied above). If\r\n        Cash is positive, then this value is added to Cash. If Cash is negative,\r\n        then this value is an opportunity cost that gets subtracted from Cash.\r\n        <br />\r\n        <br />\r\n        If this scenario is a refinance, then the starting cash starts off\r\n        increased by the cash-out amount and equity starts off decreased by the\r\n        cash-out amount.\r\n        <br />\r\n      </p>\r\n      <br />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={createInterestChartOptions(state.mortgages)}\r\n      />\r\n      <p>\r\n        This graph shows the total mortgage interest paid in each calendar year.\r\n      </p>\r\n      {state.mortgages.map(m => (\r\n        <Fragment key={m.id}>\r\n          <br />\r\n          <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={createAmortizationChartOptions(m)}\r\n          />\r\n          <p>Amortization schedule for Mortgage {m.id}.</p>\r\n        </Fragment>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(Report);\r\n"],"names":["commonOptions","yAxisLabelFormat","colors","red","green","blue","gold","purple","teal","pink","grey","c","color","Color","lighten","hex","darken","Highcharts","lang","thousandsSep","setCommonOptions","mortgages","m1","m2","minDate","moment","startDate","clone","maxDate","endDate","padding","diff","subtract","add","calcMinMaxDates","plotLines","arr","date","startOf","year","isBefore","push","width","value","valueOf","zIndex","makePlotLines","chart","type","zoomType","plotOptions","series","states","hover","lineWidthPlus","inactive","enabled","marker","radius","xAxis","min","max","yAxis","title","text","labels","format","tooltip","shared","crosshairs","xDateFormat","headerFormat","valuePrefix","createNetWorthChartOptions","comparison","merge","name","data","map","x","unixTimeMs","y","difference","m","n","netWorth","nw","blues","valueDecimals","createInterestChartOptions","column","groupPadding","pointPadding","interestByYear","i","interest","reds","categories","Set","flat","createAmortizationChartOptions","payments","payment","principal","locale","roundToTwo","num","Math","round","calcMonthlyPayment","p","t","transformState","reportState","state","roi","monthlyRoi","marginalTaxRate","id","interestRate","loanAmount","termMonths","MortgageTerm","term","months","MortgageType","years","yearsFixed","intRate","interestRateAdjusted","rateAdjust","monthlyInterestRate","adjustDate","monthlyPayment","closingCosts","Report","b","int","prin","isSame","bStart","bEnd","startingBalance","remainingBalance","createAmortizationSchedules","isRefinance","doItemize","m1Cash","m2Cash","m1n","m2n","m1PayLen","length","m2PayLen","m2Equity","m1Equity","netWorthDifferences","m1NetWorth","m2NetWorth","cash","equity","m1PrevCash","m2PrevCash","m1Payment","m2Payment","eitherPayment","undefined","compareMortgages","prevYear","newYear","calcMortgageInterestByYear","tableCellStyle","border","fontSize","Divider","variant","Table","sx","margin","Fragment","TableBody","TableRow","TableCell","verticalAlign","whiteSpace","toLocaleString","highcharts","options","teals","golds","memo"],"sourceRoot":""}