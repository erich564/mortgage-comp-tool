{"version":3,"file":"static/js/969.8fbfacbc.chunk.js","mappings":"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","sources":["ChartOptions.js","Report.js"],"sourcesContent":["import Highcharts from 'highcharts';\r\nimport moment from 'moment';\r\nimport merge from './Merge';\r\n\r\nconst yAxisLabelFormat = '${value:,.0f}';\r\n\r\nHighcharts.setOptions({\r\n  lang: {\r\n    thousandsSep: ',',\r\n  },\r\n});\r\n\r\nlet commonOptions;\r\n\r\n/**\r\n * Determines min/max dates that will cover both mortgage amortization time periods.\r\n * Then adds some padding to those dates so the data is not pushing up against the\r\n * ends of the chart.\r\n */\r\nconst calcMinMaxDates = mortgages => {\r\n  const m1 = mortgages[0];\r\n  const m2 = mortgages[1];\r\n  const minDate = moment.min(m1.startDate, m2.startDate).clone();\r\n  const maxDate = moment.max(m1.endDate, m2.endDate).clone();\r\n  const diff = maxDate.diff(minDate, 'days');\r\n  const margin = 0.02;\r\n  const padding = diff * margin;\r\n  minDate.subtract(padding, 'days');\r\n  maxDate.add(padding, 'days');\r\n  return { minDate, maxDate };\r\n};\r\n\r\n/**\r\n * Vertical lines on the graphs.\r\n */\r\nconst makePlotLines = (minDate, maxDate) => {\r\n  const yearsBetweenLines = 5;\r\n  const arr = [];\r\n  const date = minDate.clone().add(1, 'year').startOf('year');\r\n  while (date.year() % yearsBetweenLines !== 0) date.add(1, 'year');\r\n  while (date.isBefore(maxDate)) {\r\n    arr.push({\r\n      color: '#EEE',\r\n      width: 1,\r\n      value: date.valueOf(),\r\n      zIndex: 2,\r\n    });\r\n    date.add(yearsBetweenLines, 'year');\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport const setCommonOptions = mortgages => {\r\n  const { minDate, maxDate } = calcMinMaxDates(mortgages);\r\n  const plotLines = makePlotLines(minDate, maxDate);\r\n\r\n  commonOptions = {\r\n    chart: {\r\n      type: 'spline',\r\n      zoomType: 'x',\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        states: {\r\n          hover: {\r\n            lineWidthPlus: 0,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    xAxis: {\r\n      type: 'datetime',\r\n      min: minDate.valueOf(),\r\n      max: maxDate.valueOf(),\r\n      plotLines,\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: null,\r\n      },\r\n      labels: {\r\n        format: yAxisLabelFormat,\r\n      },\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      crosshairs: true,\r\n      // xDateFormat: '%b %Y',\r\n      xDateFormat: '%m-%Y',\r\n      headerFormat: '{point.key}<br/>',\r\n      valuePrefix: '$',\r\n    },\r\n  };\r\n};\r\n\r\nexport const createComparisonChartOptions = (comparison, mortgages) =>\r\n  merge(commonOptions, {\r\n    title: {\r\n      text: 'Mortgages Compared',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Net Worth Difference',\r\n        data: comparison.map(c => ({\r\n          x: c.unixTimeMs,\r\n          y: c.difference,\r\n        })),\r\n      },\r\n      ...mortgages.map(m => ({\r\n        name: `${m.name} Net Worth`,\r\n        data: m.netWorth.map(nw => ({\r\n          x: nw.unixTimeMs,\r\n          y: nw.netWorth,\r\n        })),\r\n      })),\r\n      ...mortgages.map(m => ({\r\n        name: `${m.name} Cash`,\r\n        data: m.netWorth.map(nw => ({\r\n          x: nw.unixTimeMs,\r\n          y: nw.cash,\r\n        })),\r\n        visible: false,\r\n      })),\r\n      ...mortgages.map(m => ({\r\n        name: `${m.name} Equity`,\r\n        data: m.netWorth.map(nw => ({\r\n          x: nw.unixTimeMs,\r\n          y: nw.equity,\r\n        })),\r\n        visible: false,\r\n      })),\r\n    ],\r\n    tooltip: {\r\n      valueDecimals: 0,\r\n    },\r\n  });\r\n\r\nexport const createCumulativeChartOptions = mortgages =>\r\n  merge(commonOptions, {\r\n    title: {\r\n      text: `Cumulative Payments`,\r\n    },\r\n    series: [\r\n      ...mortgages.map(m => ({\r\n        name: `${m.name} Payments`,\r\n        data: m.payments.map(p => ({\r\n          x: p.unixTimeMs,\r\n          y: p.cumPayments,\r\n        })),\r\n      })),\r\n      ...mortgages.map(m => ({\r\n        name: `${m.name} Principal`,\r\n        data: m.payments.map(p => ({\r\n          x: p.unixTimeMs,\r\n          y: p.cumPrincipal,\r\n        })),\r\n        visible: false,\r\n      })),\r\n      ...mortgages.map(m => ({\r\n        name: `${m.name} Interest`,\r\n        data: m.payments.map(p => ({\r\n          x: p.unixTimeMs,\r\n          y: p.cumInterest,\r\n        })),\r\n        visible: false,\r\n      })),\r\n    ],\r\n    tooltip: {\r\n      valueDecimals: 0,\r\n    },\r\n  });\r\n\r\nexport const createAmortizationChartOptions = m =>\r\n  merge(commonOptions, {\r\n    title: {\r\n      text: `${m.name} Amortization`,\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Principal',\r\n        data: m.payments.map(payment => ({\r\n          x: payment.unixTimeMs,\r\n          y: payment.principal,\r\n        })),\r\n      },\r\n      {\r\n        name: 'Interest',\r\n        data: m.payments.map(payment => ({\r\n          x: payment.unixTimeMs,\r\n          y: payment.interest,\r\n        })),\r\n      },\r\n    ],\r\n    tooltip: {\r\n      valueDecimals: 2,\r\n    },\r\n  });\r\n","import { Divider } from '@mui/material';\r\nimport clone from 'clone';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { memo } from 'react';\r\nimport {\r\n  createAmortizationChartOptions,\r\n  createComparisonChartOptions,\r\n  createCumulativeChartOptions,\r\n  setCommonOptions,\r\n} from './ChartOptions';\r\nimport MortgageTerm from './MortgageTerm';\r\nimport MortgageType from './MortgageType';\r\n\r\nconst monthsPerYear = 12;\r\n\r\n/**\r\n * Convert annual rate to monthly rate (with monthly compounding).\r\n */\r\nconst calcMonthlyRoi = n => (1 + n) ** (1 / monthsPerYear) - 1;\r\n\r\n/** Round to 2 decimal places */\r\n// eslint-disable-next-line prefer-template\r\nconst roundToTwo = num => +(Math.round(+`${num}e+2`) + 'e-2');\r\n\r\n/**\r\n * Calculate monthly loan payment amount\r\n * @param {number} p Remaining principal for the loan.\r\n * @param {number} i Monthly interest rate.\r\n * @param {number} t Remaining months for the loan. (term)\r\n */\r\nconst calcMonthlyPayment = (p, i, t) => {\r\n  const x = (1 + i) ** t;\r\n  return roundToTwo((p * (i * x)) / (x - 1));\r\n};\r\n\r\nconst transformState = reportState => {\r\n  const state = clone(reportState);\r\n  state.roi /= 100;\r\n  state.monthlyRoi = calcMonthlyRoi(state.roi);\r\n  state.marginalTaxRate /= 100;\r\n  for (const m of state.mortgages) {\r\n    m.name = `Mortgage ${m.id}`;\r\n    m.interestRate /= 100;\r\n    m.loanAmount = +m.loanAmount;\r\n    m.term = MortgageTerm.props[m.term].months;\r\n    m.endDate = m.startDate.clone().add(m.term - 1, 'months');\r\n    if (m.type !== MortgageType.FixedRate) {\r\n      const years = MortgageType.props[m.type].yearsFixed;\r\n      const intRate = m.interestRateAdjusted / 100;\r\n      m.rateAdjust = {\r\n        interestRate: intRate,\r\n        monthlyInterestRate: intRate / monthsPerYear,\r\n        adjustDate: m.startDate.clone().add(years, 'years'),\r\n      };\r\n    }\r\n    m.monthlyInterestRate = m.interestRate / monthsPerYear;\r\n    m.monthlyPayment = calcMonthlyPayment(\r\n      m.loanAmount,\r\n      m.monthlyInterestRate,\r\n      m.term\r\n    );\r\n    m.payments = [];\r\n    m.netWorth = [];\r\n    m.closingCosts = +m.closingCosts;\r\n    delete m.interestRateAdjusted;\r\n  }\r\n  return state;\r\n};\r\n\r\n/**\r\n * Builds amortization schedule for a mortgages, with each payment's principal\r\n * and interest portions.\r\n */\r\nconst createAmortizationSchedules = mortgages => {\r\n  for (const m of mortgages) {\r\n    let b = m.loanAmount;\r\n    let intRate = m.monthlyInterestRate;\r\n    const date = m.startDate.clone();\r\n    let { monthlyPayment } = m;\r\n    let prevPayment;\r\n    while (b > 0) {\r\n      const int = roundToTwo(b * intRate);\r\n      let prin;\r\n      // on the very last payment, pay off remaining balance due to rounding over time\r\n      if (date.isSame(m.endDate)) {\r\n        prin = b;\r\n      } else {\r\n        prin = roundToTwo(monthlyPayment - int);\r\n      }\r\n      const bStart = roundToTwo(b);\r\n      const bEnd = roundToTwo(bStart - prin);\r\n      b = bEnd;\r\n      const cumPrin = roundToTwo(\r\n        prin + (prevPayment ? prevPayment.cumPrincipal : 0)\r\n      );\r\n      const cumInt = roundToTwo(\r\n        int + (prevPayment ? prevPayment.cumInterest : 0)\r\n      );\r\n      const cumPayments = roundToTwo(cumPrin + cumInt);\r\n      const payment = {\r\n        principal: prin,\r\n        interest: int,\r\n        date: date.clone(),\r\n        unixTimeMs: date.valueOf(),\r\n        startingBalance: bStart,\r\n        remainingBalance: bEnd,\r\n        cumPrincipal: cumPrin,\r\n        cumInterest: cumInt,\r\n        cumPayments,\r\n      };\r\n      m.payments.push(payment);\r\n      date.add(1, 'month');\r\n      prevPayment = payment;\r\n      if (m.rateAdjust && date.isSame(m.rateAdjust.adjustDate)) {\r\n        intRate = m.rateAdjust.monthlyInterestRate;\r\n        const t = m.term - m.rateAdjust.adjustDate.diff(m.startDate, 'months');\r\n        monthlyPayment = calcMonthlyPayment(b, intRate, t);\r\n        m.rateAdjust.monthlyPayment = monthlyPayment;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Creates data for comparing cash, equity, and net worth comparisons of the two\r\n * mortgages over their life time.\r\n */\r\nconst compareMortgages = ({\r\n  mortgages,\r\n  isRefinance,\r\n  doItemize,\r\n  marginalTaxRate,\r\n  monthlyRoi,\r\n}) => {\r\n  let m1 = mortgages[0];\r\n  let m2 = mortgages[1];\r\n  const isM2StartDateBeforeM1 = m2.startDate.isBefore(m1.startDate);\r\n  if (isM2StartDateBeforeM1) {\r\n    [m1, m2] = [m2, m1];\r\n  }\r\n  let m1n = 0;\r\n  let m2n = 0;\r\n  const m1PayLen = m1.payments.length;\r\n  const m2PayLen = m2.payments.length;\r\n\r\n  // fast-forward m1 payment schedule to first payment date of m2\r\n  while (m1.payments[m1n] && !m1.payments[m1n].date.isSame(m2.startDate)) m1n++;\r\n\r\n  let m1Cash;\r\n  let m2Cash;\r\n  let m1Equity = 0;\r\n  let m2Equity;\r\n\r\n  if (isRefinance) {\r\n    m1Cash = 0;\r\n    m2Cash = roundToTwo(\r\n      m2.loanAmount - m1.payments[m1n].startingBalance - m2.closingCosts\r\n    );\r\n    m2Equity = -m2Cash;\r\n  } else {\r\n    m1Cash = -m1.closingCosts;\r\n    m2Cash = -m2.closingCosts;\r\n    m2Equity = 0;\r\n  }\r\n\r\n  let m1PrevCash = m1Cash;\r\n  let m2PrevCash = m2Cash;\r\n  const netWorthDifferences = [];\r\n  let m1Payment = m1.monthlyPayment;\r\n  let m2Payment = m2.monthlyPayment;\r\n\r\n  while (m1n < m1PayLen || m2n < m2PayLen) {\r\n    const eitherPayment = m1n < m1PayLen ? m1.payments[m1n] : m2.payments[m2n];\r\n    const { date } = eitherPayment;\r\n    const { unixTimeMs } = eitherPayment;\r\n    let m1NetWorth;\r\n    let m2NetWorth;\r\n\r\n    if (m1n < m1PayLen) {\r\n      if (m1.rateAdjust && date.isSame(m1.rateAdjust.adjustDate))\r\n        m1Payment = m1.rateAdjust.monthlyPayment;\r\n      const accruedInt = m1PrevCash === undefined ? 0 : m1PrevCash * monthlyRoi;\r\n      m1Cash = m1Cash - m1Payment + accruedInt;\r\n      if (doItemize) {\r\n        m1Cash += m1.payments[m1n].interest * marginalTaxRate;\r\n      }\r\n      m1Equity += m1.payments[m1n].principal;\r\n      m1NetWorth = roundToTwo(m1Cash + m1Equity);\r\n      m1.netWorth.push({\r\n        unixTimeMs,\r\n        cash: m1Cash,\r\n        equity: m1Equity,\r\n        netWorth: m1NetWorth,\r\n      });\r\n      m1PrevCash = m1Cash;\r\n      m1n++;\r\n    }\r\n\r\n    if (m2n < m2PayLen) {\r\n      if (m2.rateAdjust && date.isSame(m2.rateAdjust.adjustDate))\r\n        m2Payment = m2.rateAdjust.monthlyPayment;\r\n      const accruedInt = m2PrevCash === undefined ? 0 : m2PrevCash * monthlyRoi;\r\n      m2Cash = m2Cash - m2Payment + accruedInt;\r\n      if (doItemize) {\r\n        m2Cash += m2.payments[m2n].interest * marginalTaxRate;\r\n      }\r\n      m2Equity += m2.payments[m2n].principal;\r\n      m2NetWorth = m2Cash + m2Equity;\r\n      m2.netWorth.push({\r\n        unixTimeMs,\r\n        cash: m2Cash,\r\n        equity: m2Equity,\r\n        netWorth: m2NetWorth,\r\n      });\r\n      m2PrevCash = m2Cash;\r\n      m2n++;\r\n    }\r\n\r\n    if (m1NetWorth && m2NetWorth) {\r\n      netWorthDifferences.push({\r\n        unixTimeMs,\r\n        difference: m2NetWorth - m1NetWorth,\r\n      });\r\n    }\r\n  }\r\n\r\n  return netWorthDifferences;\r\n};\r\n\r\nfunction Report({ reportState }) {\r\n  const state = transformState(reportState);\r\n  createAmortizationSchedules(state.mortgages);\r\n  const comparison = compareMortgages(state);\r\n  setCommonOptions(state.mortgages);\r\n\r\n  return (\r\n    <>\r\n      <Divider variant=\"middle\" />\r\n      <br />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={createComparisonChartOptions(comparison, state.mortgages)}\r\n      />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={createCumulativeChartOptions(state.mortgages)}\r\n      />\r\n      {state.mortgages.map(m => (\r\n        <HighchartsReact\r\n          key={m.id}\r\n          highcharts={Highcharts}\r\n          options={createAmortizationChartOptions(m)}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(Report);\r\n"],"names":["commonOptions","Highcharts","lang","thousandsSep","setCommonOptions","mortgages","m1","m2","minDate","moment","startDate","clone","maxDate","endDate","padding","diff","subtract","add","calcMinMaxDates","plotLines","arr","date","startOf","year","isBefore","push","color","width","value","valueOf","zIndex","makePlotLines","chart","type","zoomType","plotOptions","series","states","hover","lineWidthPlus","xAxis","min","max","yAxis","title","text","labels","format","tooltip","shared","crosshairs","xDateFormat","headerFormat","valuePrefix","createComparisonChartOptions","comparison","merge","name","data","map","c","x","unixTimeMs","y","difference","m","netWorth","nw","cash","visible","equity","valueDecimals","createAmortizationChartOptions","payments","payment","principal","interest","roundToTwo","num","Math","round","calcMonthlyPayment","p","i","t","transformState","reportState","n","state","roi","monthlyRoi","marginalTaxRate","id","interestRate","loanAmount","term","MortgageTerm","months","MortgageType","years","yearsFixed","intRate","interestRateAdjusted","rateAdjust","monthlyInterestRate","adjustDate","monthlyPayment","closingCosts","Report","b","prevPayment","int","prin","isSame","bStart","bEnd","cumPrin","cumPrincipal","cumInt","cumInterest","cumPayments","startingBalance","remainingBalance","createAmortizationSchedules","isRefinance","doItemize","m1Cash","m2Cash","m1n","m2n","m1PayLen","length","m2PayLen","m2Equity","m1Equity","m1PrevCash","m2PrevCash","netWorthDifferences","m1Payment","m2Payment","eitherPayment","m1NetWorth","m2NetWorth","undefined","compareMortgages","Divider","variant","highcharts","options","memo"],"sourceRoot":""}