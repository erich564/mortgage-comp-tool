{"version":3,"file":"static/js/969.5c7ed88d.chunk.js","mappings":"6KAqCIA,EACAC,E,0LAlCEC,EAASC,EAAQ,MAEjBC,EAAmB,gBAInBC,EAAS,CACbC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,KAAM,UACNC,KAAM,UACNC,KAAM,QAGR,IAAK,IAAMC,KAAKT,EAAQ,CACtB,IAEMU,EAAQC,GAAAA,CAAMX,EAAOS,IAC3BT,EAAO,GAAD,OAAIS,EAAJ,MAAY,CAChBC,EAAME,QAJW,IAISC,MAC1BH,EAAMI,OAJU,KAIQD,OAI5BE,IAAAA,WAAsB,CACpBC,KAAM,CACJC,aAAc,OAYlB,IA+BaC,EAAmB,SAAC,GAAgB,IAC/C,EAhCsB,SAACC,EAAIC,GAC3B,IAAMC,EAAUxB,EAAOyB,IAAIH,EAAGI,UAAWH,EAAGG,WAAWC,QACjDC,EAAU5B,EAAO6B,IAAIP,EAAGQ,QAASP,EAAGO,SAASH,QAG7CI,EADS,IADFH,EAAQI,KAAKR,EAAS,QAKnC,OAFAA,EAAQS,SAASF,EAAS,QAC1BH,EAAQM,IAAIH,EAAS,QACd,CAAEP,QAAAA,EAASI,QAAAA,GAwBWO,CADiB,EAAbb,GAAa,EAATC,IAC7BC,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,QACjB9B,EAnBoB,SAAC0B,EAASI,GAI9B,IAHA,IACMQ,EAAM,GACNC,EAAOb,EAAQG,QAAQO,IAAI,EAAG,QAAQI,QAAQ,QAC7CD,EAAKE,OAHc,IAGiB,GAAGF,EAAKH,IAAI,EAAG,QAC1D,KAAOG,EAAKG,SAASZ,IACnBQ,EAAIK,KAAK,CACP5B,MAAO,OACP6B,MAAO,EACPC,MAAON,EAAKO,UACZC,OAAQ,IAEVR,EAAKH,IAXmB,EAWI,QAE9B,OAAOE,EAKKU,CAActB,EAASI,GAEnC7B,EAAgB,CACdgD,MAAO,CACLC,KAAM,SACNC,SAAU,KAEZC,YAAa,CACXC,OAAQ,CACNC,OAAQ,CACNC,MAAO,CACLC,cAAe,GAEjBC,SAAU,CACRC,SAAS,IAGbC,OAAQ,CACNC,OAAQ,KAIdC,MAAO,CACLX,KAAM,WACNvB,IAAKD,EAAQoB,UACbf,IAAKD,EAAQgB,UACbgB,SAhGgB,WAiGhB9D,UAAAA,GAEF+D,MAAO,CACLC,MAAO,CACLC,KAAM,MAERC,OAAQ,CACNC,OAAQ/D,GAEVJ,UAAW,CACT,CACEe,MAAO,OACP6B,MAAO,EACPC,MAAO,EACPE,OAAQ,KAIdqB,QAAS,CACPC,QAAQ,EACRC,OAAO,EACPC,YAAY,EAEZC,YAAa,QACbC,aAAc,mBACdC,YAAa,OAKNC,EAA+B,SAAC,GAGtC,IAFLC,EAEI,EAFJA,oBAGMC,EAAsB,GACtBC,EAFF,EADJC,kBAIAD,EAAOE,QAHH,gBAIgBF,GAJhB,IAIJ,2BAA4B,CAAC,IAAlBG,EAAiB,QAC1BJ,EAAoBlC,KAAK,CACvB5B,MAAO,OACP6B,MAAO,EACPC,MAAOoC,EAAMrD,UAAUkB,UACvBC,OAAQ,EACRmC,UAAW,cAVX,8BAaJ,OAAOC,EAAAA,EAAAA,GAAMlF,EAAe,CAC1B+D,MAAO,CACLC,KAAM,cAERZ,OAAQ,CACN,CACE+B,KAAM,uBACNC,KAAMT,EAAoBU,KAAI,SAAAxE,GAAC,MAAK,CAClCyE,EAAGzE,EAAE0E,WACLC,EAAG3E,EAAE4E,eAEP3E,MAAOV,EAAOG,OAclB4D,QAAS,CACPuB,cAAe,MAiCRC,EAA6B,SAAAC,GAAS,MAAK,CACtD5C,MAAO,CACLC,KAAM,UAERc,MAAO,CACLC,KAAK,6BAEPb,YAAa,CACX0C,OAAQ,CACNC,aAAc,EACdC,aAAc,GAEhB3C,OAAQ,CACNC,OAAQ,CACNG,SAAU,CACRC,SAAS,GAEXH,OAAO,KAIbF,QAAO,OACFwC,EAAUP,KAAI,SAACW,EAAGC,GAAJ,MAAW,CAC1Bd,KAAK,GAAD,OAAKa,EAAEb,KAAP,aACJC,KAAMY,EAAEE,eAAeb,KAAI,SAAAc,GAAC,MAAK,CAC/BhB,KAAMgB,EAAE3D,KACRgD,EAAGW,EAAEC,aAEPtF,MAAOV,EAAOiG,KAAKJ,QAGvBrC,MAAO,CACLX,KAAM,WACNqD,YAAW,OACN,IAAIC,IAAIX,EAAUP,KAAI,SAAAW,GAAC,OAAIA,EAAEE,eAAeb,KAAI,SAAAc,GAAC,OAAIA,EAAE3D,WAAOgE,UAGrE1C,MAAO,CACLC,MAAO,CACLC,KAAM,MAERC,OAAQ,CACNC,OAAQ/D,GAEVJ,UAAW,CACT,CACEe,MAAO,OACP6B,MAAO,EACPC,MAAO,EACPE,OAAQ,KAIdqB,QAAS,CACPE,OAAO,EACPqB,cAAe,EACflB,aAAc,mBACdJ,QAAQ,EACRK,YAAa,OAIJgC,EAA4B,SAAAb,GAAS,OAChDV,EAAAA,EAAAA,GAAMlF,EAAe,CACnB+D,MAAO,CACLC,KAAK,qBAEPZ,QAAO,OACFwC,EAAUP,KAAI,SAACW,EAAGC,GAAJ,MAAW,CAC1Bd,KAAK,GAAD,OAAKa,EAAEb,KAAP,YACJC,KAAK,CACH,CACEE,EAAGU,EAAErE,UAAUO,SAAS,EAAG,SAASW,UACpC2C,EAAGQ,EAAEU,aAHL,eAKCV,EAAEW,SAAStB,KAAI,SAAAuB,GAAO,MAAK,CAC5BtB,EAAGsB,EAAQrB,WACXC,EAAGoB,EAAQC,uBAGf/F,MAAOV,EAAO0G,QAAQb,QAG1B9B,QAAS,CACPuB,cAAe,M,iDCjRfqB,EAHS7G,EAAQ,KAGAD,CAAO,aAAc,cAStC+G,EAAa,SAAAC,GAAG,OADN,SAAChB,EAAGgB,GAAJ,OAAa,GAAD,OAAIC,KAAKC,OAAO,GAAD,OAAIF,EAAJ,aAAYhB,IAA3B,aAAoCA,GACtCmB,CAAQ,EAAGH,IAQ/BI,EAAqB,SAACC,EAAGnB,EAAGoB,GAChC,IAAMjC,EAAC,SAAI,EAAIa,EAAMoB,GACrB,OAAOP,EAAYM,GAAKnB,EAAIb,IAAOA,EAAI,KA8BnCkC,EAAiB,SAAAC,GACrB,IA7CqBxB,EA6Cfb,EAAOxD,GAAAA,CAAM6F,GACnBrC,EAAKsC,KAAO,IACZtC,EAAKuC,YA/CgB1B,EA+CYb,EAAKsC,IA/CZ,SAAC,EAAIzB,EAAO,EAAI2B,EAAAA,IAAiB,GAgD3DxC,EAAKyC,iBAAmB,IACxBzC,EAAK0C,yBAA2B1C,EAAK0C,wBACrC1C,EAAK2C,uBAAyB3C,EAAK2C,sBACnC3C,EAAK4C,wBAA0B5C,EAAK4C,uBAPA,gBAQpB5C,EAAKQ,WARe,IAQpC,2BAAgC,CAAC,IAAtBI,EAAqB,QAM9B,GALAA,EAAEb,KAAF,mBAAqBa,EAAEiC,IACvBjC,EAAEkC,cAAgB,IAClBlC,EAAEU,YAAcV,EAAEU,WAClBV,EAAEmC,WAAaC,EAAAA,EAAAA,MAAmBpC,EAAEqC,MAAMC,OAC1CtC,EAAEjE,QAAUiE,EAAErE,UAAUC,QAAQO,IAAI6D,EAAEmC,WAAa,EAAG,UAClDnC,EAAE/C,OAASsF,EAAAA,EAAAA,UAAwB,CACrC,IAAMC,EAAQD,EAAAA,EAAAA,MAAmBvC,EAAE/C,MAAMwF,WACnCC,EAAU1C,EAAE2C,qBAAuB,IACzC3C,EAAE4C,WAAa,CACbV,aAAcQ,EACdG,oBAAqBH,EAAUd,EAAAA,GAC/BkB,WAAY9C,EAAErE,UAAUC,QAAQO,IAAIqG,EAAO,UAG/CxC,EAAE6C,oBAAsB7C,EAAEkC,aAAeN,EAAAA,GACzC5B,EAAE+C,eAAiB1B,EACjBrB,EAAEU,WACFV,EAAE6C,oBACF7C,EAAEmC,YAEJnC,EAAEgD,cAAgBhD,EAAEgD,oBACbhD,EAAE2C,sBA9ByB,8BAiCpC,OAAOvD,GAiFH6D,EAAyB,SAACC,EAAQvH,EAAWwH,GAejD,OAbIxH,EAAUyH,QAAQrC,GAChBoC,IAAoBE,EAAAA,EAAAA,wBACAnC,KAAKxF,IAAI,MAAQwH,GAEjBhC,KAAKxF,IAAI,KAAQwH,GAGrCC,IAAoBE,EAAAA,EAAAA,wBACAnC,KAAKxF,IAAI,IAAQwH,GAEjBhC,KAAKxF,IAAI,IAASwH,IAkIxCI,EAAyC,SAAC9G,EAAM0D,GACpD,MAAkDA,EAAeqD,MAC/D,SAAAjE,GAAC,OAAIA,EAAE9C,OAASA,KADVgH,EAAR,EAAQA,mBAAoBC,EAA5B,EAA4BA,kBAM5B,OAHkCzC,EAChCwC,EAAqBC,IA2MzB,SAASC,EAAT,GAAkC,IAAhBjC,EAAe,EAAfA,YACVrC,EAAOoC,EAAeC,GADG,UAEVrC,EAAKQ,UAFK,GAE9BR,EAAK7D,GAFyB,KAErB6D,EAAK5D,GAFgB,KA7XA,SAAC,GAAiC,IAE7DmI,EACAC,EAH8BrI,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,GAAI2H,EAAsB,EAAtBA,gBAMxCQ,EADEpI,EAAGI,UAAUc,SAASjB,EAAGG,WACfJ,EAAGI,UAAUa,OAEbhB,EAAGG,UAAUa,OAGzBoH,EADErI,EAAGQ,QAAQqH,QAAQ5H,EAAGO,SACdR,EAAGQ,QAAQS,OAEXhB,EAAGO,QAAQS,OAMvB,IAJA,IAAMqH,EAASR,EAAAA,EAAAA,MAAsBF,GAAiBW,kBAChDC,EAAOC,OAAOD,KAAKF,GACnBI,GAASF,EAAK,GACdG,GAAQH,EAAKI,MACVhE,EAAI8D,EAAQ,EAAG9D,GAAKwD,EAAWxD,IACtC0D,EAAO1D,GAAKa,EAAW6C,EAAO1D,EAAI,GAAX,QAEzB,IAAK,IAAIA,EAAI+D,EAAO,EAAG/D,GAAKyD,EAASzD,IACnC0D,EAAO1D,GAAK0D,EAAO1D,EAAI,GAyWzBiE,CAAyBhF,GA3aS,SAAAQ,GAAc,IAAD,YAC/BA,GAD+B,IAC/C,2BAA2B,CAAC,IAAjBI,EAAgB,QACrBqE,EAAIrE,EAAEU,WACNgC,EAAU1C,EAAE6C,oBACVvG,EAAO0D,EAAErE,UAAUC,QACnBmH,EAAmB/C,EAAnB+C,eAEN,IADA/C,EAAEW,SAAW,GACN0D,EAAI,GAAG,CACZ,IAAMC,EAAMtD,EAAWqD,EAAI3B,GACvB6B,OAAI,EAGNA,EADEjI,EAAKkI,OAAOxE,EAAEjE,SACTsI,EAEArD,EAAW+B,EAAiBuB,GAErC,IAAMG,EAASzD,EAAWqD,GACpBK,EAAO1D,EAAWyD,EAASF,GACjCF,EAAIK,EACJ,IAAM9D,EAAU,CACd+D,UAAWJ,EACXnE,SAAUkE,EACVhI,KAAMA,EAAKV,QACX2D,WAAYjD,EAAKO,UACjB+H,gBAAiBH,EACjB5D,iBAAkB6D,GAIpB,GAFA1E,EAAEW,SAASjE,KAAKkE,GAChBtE,EAAKH,IAAI,EAAG,SACR6D,EAAE4C,YAActG,EAAKkI,OAAOxE,EAAE4C,WAAWE,YAAa,CACxDJ,EAAU1C,EAAE4C,WAAWC,oBACvB,IAAMtB,EACJvB,EAAEmC,WAAanC,EAAE4C,WAAWE,WAAW7G,KAAK+D,EAAErE,UAAW,UAC3DoH,EAAiB1B,EAAmBgD,EAAG3B,EAASnB,GAChDvB,EAAE4C,WAAWG,eAAiBA,KAlCW,+BA4a/C8B,CAA4BzF,EAAKQ,WACjCR,EAAK0F,mBA7UiC,SAAC,GAEvC,IAFuD,IAAdvJ,EAAa,EAAbA,GAAIC,EAAS,EAATA,GACzCuJ,EAAM,EACHxJ,EAAGoF,SAASoE,KAASxJ,EAAGoF,SAASoE,GAAKzI,KAAKkI,OAAOhJ,EAAGG,YAE1D,GAAY,QADZoJ,EAEE,MAAM,IAAIC,MAAJ,uEAIV,OAAOD,EAoUmBE,CAAgC7F,GACtDA,EAAK8F,aA9TyB,SAAC,GAAoC,IAAlC3J,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,GACnC2J,EADgE,EAAzBL,mBACF,EACrCM,EAAoB7J,EAAGoF,SAASwE,GAKhCE,EAHkBD,EAAkB9I,KACvCV,QACAU,KAH2B,IAIM+I,cACpC9J,EAAG+J,iBAAmBtE,EACpBoE,EAAkBhF,UAAY,GAA8BiF,IAE9D7J,EAAG8J,iBAAmBtE,EACpBxF,EAAGmF,SAAS,GAAGP,WACXiF,EAVwB,GAUc,GAAKA,IAiT3BE,CAA4BnG,GA1Sf,SAAC,GAQ/B,IAPL8F,EAOI,EAPJA,YACAlD,EAMI,EANJA,uBACAmB,EAKI,EALJA,gBACA5H,EAII,EAJJA,GACAC,EAGI,EAHJA,GACAsJ,EAEI,EAFJA,mBACA/C,EACI,EADJA,sBAIA,GAFAxG,EAAGiK,WAAa,EAEZN,EAAa,CACf,IAAMO,EACJlK,EAAGoF,SAASmE,EAAqB,GAAGF,gBACtCrJ,EAAGmK,SAAW,EACdlK,EAAGkK,SAAW1E,EACZxF,EAAGkF,WACD+E,EACAjK,EAAGwH,aACHzH,EAAG+J,iBACH9J,EAAG8J,kBAEP9J,EAAGgK,YAAcxE,EAAWxF,EAAGkF,WAAa+E,GACxClK,EAAGI,UAAUyH,QAAQrC,IAA6C,IAA1BgB,EAC1CxG,EAAGoK,oBAAsBzE,KAAKxF,IAAIqG,EAAuBxG,EAAGmF,YAE5DnF,EAAGoK,oBAAsBpK,EAAGmF,WAE9B,IAAIkF,EAAOpK,EAAGkF,WACVlF,EAAGG,UAAUyH,QAAQrC,KACvB6E,EACE1E,KAAKxF,IAAIH,EAAGoK,oBAAqBF,EAA2BG,GAC5D5D,GACJxG,EAAGmK,oBAAsBzE,KAAKxF,IAAIsF,EAAW4E,GAAOpK,EAAGkF,gBAClD,CACL,IAAMmF,EAAiBrK,EAAGkF,WAAanF,EAAGmF,WAC1CnF,EAAGmK,UAAYnK,EAAGyH,aAClBxH,EAAGkK,SAAWG,EAAiBrK,EAAGwH,aAClCxH,EAAGgK,YAAcK,EACjBrK,EAAGmK,oBAAsBnK,EAAGkF,WAG9BnF,EAAGoK,oBAAsB1C,EACvB1H,EAAGoK,oBACHpK,EAAGI,UACHwH,GAEF3H,EAAGmK,oBAAsB1C,EACvBzH,EAAGmK,oBACHpK,EAAGI,UACHwH,GAyPF2C,CAA6B1G,GAzHI,SAAC,GA6BlC,IApBK,IARL7D,EAQI,EARJA,GACAC,EAOI,EAPJA,GACA0J,EAMI,EANJA,YACAa,EAKI,EALJA,UACAjB,EAII,EAJJA,mBACA3B,EAGI,EAHJA,gBACArB,EAEI,EAFJA,wBACAD,EACI,EADJA,gBAEMmE,EAAa,SACjBhG,EACAxD,EACA4D,EACA6F,EACAxC,GAEAzD,EAAEE,eAAexD,KAAK,CACpBF,KAAAA,EACA4D,SAAUY,EAAWZ,GACrB6F,mBAAoBjF,EAAWiF,GAC/BxC,kBAAAA,KAGEyC,EAAY,SAACP,EAAqBf,GAAtB,OAChBe,EAAsBf,EAClBe,EAAsBf,EACtB,GAEN,MAAgB,CAACrJ,EAAIC,GAArB,eAA0B,CAArB,IAAMwE,EAAC,KACVA,EAAEE,eAAiB,GACnB,IAFwB,EAEpBE,EAAW,EACX6F,EAAqB,EACrBxC,EAAoB,EACpB0C,GAAc,EACdC,OAAQ,EANY,UAORpG,EAAEW,UAPM,IAOxB,2BAA4B,CAAC,IAAlBW,EAAiB,QACpB9E,EAAO8E,EAAEhF,KAAKE,OAChB4J,GAAYA,IAAa5J,IAEvB2J,IACF1C,IACA0C,GAAc,GAEhBH,EACEhG,EACAoG,EACAhG,EACA6F,EACAxC,GAEFrD,EAAW,EACX6F,EAAqB,GAEvBxC,IACArD,GAAYkB,EAAElB,SACd,IAAMiG,EAAQH,EAAUlG,EAAE2F,oBAAqBrE,EAAEsD,iBACjDtD,EAAE2E,mBAAqBjF,EAAWM,EAAElB,SAAWiG,GAC/CJ,GAAsB3E,EAAE2E,mBACxBG,EAAW5J,GA9BW,8BAgCxBwJ,EAAWhG,EAAGoG,EAAUhG,EAAU6F,EAAoBxC,GAMxD,GAAIyB,EAAa,CACf,IAAIH,EAAMD,EACJwB,EAAW/K,EAAGoF,SAASoE,GAAKzI,KAAKE,OACnC+J,EAAa,EACbC,EAAuB,EAC3B,IAAKzB,GAAO,EAAGxJ,EAAGoF,SAASoE,GAAKzI,KAAKE,SAAW8J,EAAUvB,IACxDwB,GAAchL,EAAGoF,SAASoE,GAAK3E,SAC/BoG,GAAwBjL,EAAGoF,SAASoE,GAAKkB,mBAE3C,IAAMQ,EAAcP,EAAU3K,EAAGoK,oBAAqBnK,EAAGkF,YACzDlF,EAAG0E,eAAe,GAAGqG,WAAavF,EAChCuF,EAAahL,EAAG+J,kBAElB9J,EAAG0E,eAAe,GAAGsG,qBACnBA,EAAuBjL,EAAG+J,iBAAmBmB,EAC/C,IAAMC,EAAcR,EAAU1K,EAAGmK,oBAAqBnK,EAAGkF,YACzDlF,EAAG0E,eAAe,GAAGE,SAAWY,EAC9BxF,EAAG0E,eAAe,GAAGE,SAAW5E,EAAG8J,kBAErC9J,EAAG0E,eAAe,GAAG+F,mBAAqBjF,EACxCxF,EAAG0E,eAAe,GAAG+F,mBACnB1K,EAAG+J,iBAAmBmB,EACtBjL,EAAG8J,iBAAmBoB,GAM5B,GAAIX,EAGF,IAFA,IAAMY,EACJtD,EAAAA,EAAAA,MAAsBF,GAAiBW,kBACzC,MAAgB,CAACvI,EAAIC,GAArB,eAA0B,CAArB,IAAqB,EAAfwE,EAAC,KAAc,UACRA,EAAEE,gBADM,IACxB,2BAAkC,CAAC,IAAxBC,EAAuB,QAC1B2D,EAAoB6C,EAAuBxG,EAAE3D,MACnD2D,EAAEqD,mBAAqBxC,EACrBa,EACEX,KAAKpF,IACHqE,EAAE8F,mBACA/E,KAAKpF,IAAIgI,EAAoBhC,EAAyB,GACxD,KARgB,gCAwB5B8E,CAA2BxH,GAC3BA,EAAKT,oBA3MkB,SAAC,GAMnB,IALLpD,EAKI,EALJA,GACAC,EAII,EAJJA,GACAuK,EAGI,EAHJA,UACApE,EAEI,EAFJA,WACAmD,EACI,EADJA,oBA9CyC,SAACvJ,EAAIC,GAC9C,IAAMqL,EAAatL,EAAGmK,SAAWnK,EAAGiK,WAC9BsB,EAAatL,EAAGkK,SAAWlK,EAAGgK,WAC9BlJ,EAAOd,EAAGmF,SAAS,GAAGrE,KAAKV,QAAQM,SAAS,EAAG,SAC/CqD,EAAajD,EAAKO,UACxBtB,EAAGwL,SAAW,GACdvL,EAAGuL,SAAW,GACdxL,EAAGwL,SAASrK,KAAK,CACfJ,KAAAA,EACAiD,WAAAA,EACAyH,KAAMzL,EAAGmK,SACTuB,OAAQ1L,EAAGiK,WACXuB,SAAUF,IAEZrL,EAAGuL,SAASrK,KAAK,CACfJ,KAAAA,EACAiD,WAAAA,EACAyH,KAAMxL,EAAGkK,SACTuB,OAAQzL,EAAGgK,WACXuB,SAAUD,IA6BZI,CAAmC3L,EAAIC,GAEvC,IAAM2L,EAAmB,SAACnH,EAAGoH,GAM3B,IALA,IAAMrE,EAAmB/C,EAAnB+C,eACFiE,EAAOhH,EAAE0F,SACT2B,EAAWrH,EAAE0F,SACbuB,EAASjH,EAAEwF,WACX8B,GAAmB,EACdnH,EAAIiH,EAASjH,EAAIH,EAAEW,SAAS4G,OAAQpH,IAAK,CAChD,IAAIqH,GAAmB,EACnBF,GAAoBnH,EAAI,IAC1BqH,GAAmB,EACnBrH,KAEF,IAAMS,EAAUZ,EAAEW,SAASR,GACrB7D,EAAOsE,EAAQtE,KAAKV,QACpB2D,EAAeqB,EAAfrB,WACF+H,IAAqBE,IACvBlL,EAAKJ,SAAS,EAAG,SACjBqD,EAAajD,EAAKO,WAEhBmD,EAAE4C,YAAchC,EAAQtE,KAAKkI,OAAOxE,EAAE4C,WAAWE,cACnDC,EAAiB/C,EAAE4C,WAAWG,gBAEhCiE,GADmBK,EAAW1F,EAE1BoE,IACFiB,GAAQ1D,EACN1C,EAAQtE,KAAKE,OACbwD,EAAEE,iBAKDoH,IAAoBE,IACvBR,GAAQjE,EACRkE,GAAUrG,EAAQ+D,WAEpB,IAAMoC,EAAW/F,EAAWgG,EAAOC,GAEnCD,EAAOhG,EAAWgG,GAClBhH,EAAE+G,SAASrK,KAAK,CACdJ,KAAAA,EACAiD,WAAAA,EACAyH,KAAAA,EACAC,OAAAA,EACAF,SAAAA,IAEFM,EAAWL,EACPM,IAAqBE,GAAkBrH,IAC3CmH,GAAmB,IAIvBH,EAAiB5L,EAAIuJ,GACrBqC,EAAiB3L,EAAI,GAGrB,IADA,IAAMmD,EAAsB,GACnBwB,EAAI,EAAGA,EAAIe,KAAKxF,IAAIH,EAAGwL,SAASQ,OAAQ/L,EAAGuL,SAASQ,QAASpH,IACpExB,EAAoBjC,KAAK,CACvBJ,KAAMf,EAAGwL,SAAS5G,GAAG7D,KACrBiD,WAAYhE,EAAGwL,SAAS5G,GAAGZ,WAC3BE,WAAYjE,EAAGuL,SAAS5G,GAAG4G,SAAWxL,EAAGwL,SAAS5G,GAAG4G,WAIzD,OAAOpI,EAmIoB8I,CAAiBrI,GAE5C9D,EAAiB8D,GACjBA,EAAKN,kBAvfuB,SAAAH,GAC5B,IACI+I,EACAC,EAH+C,EAC7C9I,EAAS,GAGT+I,EAAYjJ,EAAoB,GAAGrC,KACnCuL,EAAWlJ,EAAoBA,EAAoB4I,OAAS,GAAGjL,KACjEwL,EAAWF,EACT5B,EAAa,SAACrK,EAAWI,EAASgM,GACtClJ,EAAOnC,KAAK,CACVf,UAAAA,EACAI,QAAAA,EACAgM,WAAAA,IAEFD,EAAW/L,GAbsC,UAejC4C,GAfiC,IAenD,2BAAuC,CAAC,IAA7BqJ,EAA4B,QACrCN,EAAgBM,EAAIvI,WAAa,EACjC,IAAMwI,EAA+B,IAAnBD,EAAIvI,WAClBiI,IAAkBC,QAAqCO,IAAnBP,GACtC3B,EAAW8B,EAAUE,EAAI1L,KAAMqL,GAEjCA,EAAiBM,OAAYC,EAAYR,GArBQ,8BAwBnD,OADA1B,EAAW8B,EAAUD,EAAUF,GACxB9I,EA+dkBsJ,CAAsB/I,EAAKT,qBAEpD,ID9W0CiB,EC8WpCwI,EAAiB,CACrBC,OAAQ,EACRC,SAAU,UACVtM,QAAS,GAGX,OACE,iCACE,SAACuM,EAAA,EAAD,CAASC,QAAQ,YACjB,mBACA,mBACA,SAACC,EAAA,EAAD,CACEC,GAAI,CACF/L,MAAO,cACP,kBAAmB,CAAEqD,EAAG,SAH5B,UAME,UAAC2I,EAAA,EAAD,YACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CACEH,IAAE,kBACGN,GADH,IAEAU,cAAe,MACfC,WAAY,WAJhB,0BASA,UAACF,EAAA,EAAD,CAAWH,GAAIN,EAAf,iBAEGhJ,EAAK8F,YAAL,4FAKL,UAAC0D,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CACEH,IAAE,kBACGN,GADH,IAEAU,cAAe,MACfC,WAAY,WAJhB,0BASA,UAACF,EAAA,EAAD,CAAWH,GAAIN,EAAf,iBAEGhJ,EAAK8F,YAAL,+FAOT,kBACC9F,EAAKN,kBAAkBO,KAAI,SAACL,EAAOiB,GAAR,OAC1B,UAAC,EAAA+I,SAAD,mBACQhK,EAAMrD,UAAUuC,OAAO,WAD/B,MAC8C,IAC3Cc,EAAMjD,QAAQmC,OAAO,WAFxB,cAE+Cc,EAAM+I,WAAa,EAAI,EAAG,IAFzE,wBAGwB/I,EAAM+I,WAAa,EAAI,EAH/C,KAIE,oBAJa9H,OAOjB,mBACA,SAAC,IAAD,CACEgJ,WAAY9N,IACZ+N,QAASxK,EAA6BU,MAExC,qaAOE,mBACA,kBARF,sIAYA,mBACA,SAAC,IAAD,CACE6J,WAAY9N,IACZ+N,SDjcoCtJ,ECicER,EAAKQ,WDhcjDV,EAAAA,EAAAA,GAAMlF,EAAe,CACnB+D,MAAO,CACLC,KAAM,iBAERZ,OAAO,GAAD,eACDwC,EAAUP,KAAI,SAACW,EAAGC,GAAJ,MAAW,CAC1Bd,KAAK,YAAD,OAAca,EAAEiC,GAAhB,SACJ7C,KAAMY,EAAE+G,SAAS1H,KAAI,SAAA8J,GAAE,MAAK,CAC1B7J,EAAG6J,EAAG5J,WACNC,EAAG2J,EAAGnC,SAERlM,MAAOV,EAAOgP,MAAMnJ,SAPlB,OASDL,EAAUP,KAAI,SAACW,EAAGC,GAAJ,MAAW,CAC1Bd,KAAK,YAAD,OAAca,EAAEiC,GAAhB,WACJ7C,KAAMY,EAAE+G,SAAS1H,KAAI,SAAA8J,GAAE,MAAK,CAC1B7J,EAAG6J,EAAG5J,WACNC,EAAG2J,EAAGlC,WAERnM,MAAOV,EAAOiP,MAAMpJ,SAGxB9B,QAAS,CACPuB,cAAe,SC2af,ogBAQE,mBACA,kBATF,+JAaE,sBAEF,mBACA,SAAC,IAAD,CACEuJ,WAAY9N,IACZ+N,QAASvJ,EAA2BP,EAAKQ,cAE3C,qGAGA,mBACA,SAAC,IAAD,CACEqJ,WAAY9N,IACZ+N,QAASzI,EAA0BrB,EAAKQ,cAE1C,oGAGCR,EAAKQ,UAAUP,KAAI,SAAAW,GAAC,OACnB,UAAC,EAAAgJ,SAAD,YACE,mBACA,SAAC,IAAD,CACEC,WAAY9N,IACZ+N,SDnXkCI,ECmXMtJ,GDlXlDd,EAAAA,EAAAA,GAAMlF,EAAe,CACnBgD,MAAO,CACLC,KAAM,QAERc,MAAO,CACLC,KAAK,GAAD,OAAKsL,EAASnK,KAAd,kBAENhC,YAAa,CACXoM,KAAM,CACJC,SAAU,UAEZpM,OAAQ,CACNqM,YAAa,MAGjBrM,OAAQ,CACN,CACE+B,KAAM,YACNC,KAAMkK,EAAS3I,SAAStB,KAAI,SAAAuB,GAAO,MAAK,CACtCtB,EAAGsB,EAAQrB,WACXC,EAAGoB,EAAQ+D,cAEb7J,MAAOV,EAAOE,OAEhB,CACE6E,KAAM,WACNC,KAAMkK,EAAS3I,SAAStB,KAAI,SAAAuB,GAAO,MAAK,CACtCtB,EAAGsB,EAAQrB,WACXC,EAAGoB,EAAQR,aAEbtF,MAAOV,EAAOC,MAGlB8D,QAAS,CACPuB,cAAe,SCkVX,+DAAuCM,EAAEiC,GAAzC,SANajC,EAAEiC,ID/WqB,IAAAqH,MCwXxC,qBAKN,OAAeI,EAAAA,EAAAA,MAAKhG","sources":["ChartOptions.js","Report.js"],"sourcesContent":["import Color from 'color';\r\nimport Highcharts from 'highcharts';\r\nimport merge from './common/Merge';\r\n\r\nconst moment = require('moment');\r\n\r\nconst yAxisLabelFormat = '${value:,.0f}';\r\n\r\nconst fiveYearsInMs = 157784630000;\r\n\r\nconst colors = {\r\n  red: '#b84c3e',\r\n  green: '#86a542',\r\n  blue: '#6881d8',\r\n  gold: '#c18739',\r\n  purple: '#8650a6',\r\n  teal: '#50b47b',\r\n  pink: '#b84c7d',\r\n  grey: '#888',\r\n};\r\n\r\nfor (const c in colors) {\r\n  const lightenPct = 0.4;\r\n  const darkenPct = 0.25;\r\n  const color = Color(colors[c]);\r\n  colors[`${c}s`] = [\r\n    color.lighten(lightenPct).hex(),\r\n    color.darken(darkenPct).hex(),\r\n  ];\r\n}\r\n\r\nHighcharts.setOptions({\r\n  lang: {\r\n    thousandsSep: ',',\r\n  },\r\n});\r\n\r\nlet plotLines;\r\nlet commonOptions;\r\n\r\n/**\r\n * Determines min/max dates that will cover both mortgage amortization time periods.\r\n * Then adds some padding to those dates so the data is not pushing up against the\r\n * ends of the chart.\r\n */\r\nconst calcMinMaxDates = (m1, m2) => {\r\n  const minDate = moment.min(m1.startDate, m2.startDate).clone();\r\n  const maxDate = moment.max(m1.endDate, m2.endDate).clone();\r\n  const diff = maxDate.diff(minDate, 'days');\r\n  const margin = 0.02;\r\n  const padding = diff * margin;\r\n  minDate.subtract(padding, 'days');\r\n  maxDate.add(padding, 'days');\r\n  return { minDate, maxDate };\r\n};\r\n\r\n/**\r\n * Vertical lines on the graphs.\r\n */\r\nconst makePlotLines = (minDate, maxDate) => {\r\n  const yearsBetweenLines = 5;\r\n  const arr = [];\r\n  const date = minDate.clone().add(1, 'year').startOf('year');\r\n  while (date.year() % yearsBetweenLines !== 0) date.add(1, 'year');\r\n  while (date.isBefore(maxDate)) {\r\n    arr.push({\r\n      color: '#EEE',\r\n      width: 1,\r\n      value: date.valueOf(),\r\n      zIndex: 2,\r\n    });\r\n    date.add(yearsBetweenLines, 'year');\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport const setCommonOptions = ({ m1, m2 }) => {\r\n  const { minDate, maxDate } = calcMinMaxDates(m1, m2);\r\n  plotLines = makePlotLines(minDate, maxDate);\r\n\r\n  commonOptions = {\r\n    chart: {\r\n      type: 'spline',\r\n      zoomType: 'x',\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        states: {\r\n          hover: {\r\n            lineWidthPlus: 0,\r\n          },\r\n          inactive: {\r\n            enabled: false,\r\n          },\r\n        },\r\n        marker: {\r\n          radius: 2,\r\n        },\r\n      },\r\n    },\r\n    xAxis: {\r\n      type: 'datetime',\r\n      min: minDate.valueOf(),\r\n      max: maxDate.valueOf(),\r\n      minRange: fiveYearsInMs,\r\n      plotLines,\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: null,\r\n      },\r\n      labels: {\r\n        format: yAxisLabelFormat,\r\n      },\r\n      plotLines: [\r\n        {\r\n          color: '#AAA',\r\n          width: 1,\r\n          value: 0,\r\n          zIndex: 2,\r\n        },\r\n      ],\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      split: true,\r\n      crosshairs: true,\r\n      // xDateFormat: '%b %Y',\r\n      xDateFormat: '%m-%Y',\r\n      headerFormat: '{point.key}<br/>',\r\n      valuePrefix: '$',\r\n    },\r\n  };\r\n};\r\n\r\nexport const createComparisonChartOptions = ({\r\n  netWorthDifferences,\r\n  performanceRanges,\r\n}) => {\r\n  const breakpointPlotLines = [];\r\n  const ranges = performanceRanges;\r\n  ranges.shift();\r\n  for (const range of ranges) {\r\n    breakpointPlotLines.push({\r\n      color: '#f99',\r\n      width: 1,\r\n      value: range.startDate.valueOf(),\r\n      zIndex: 2,\r\n      dashStyle: 'ShortDot',\r\n    });\r\n  }\r\n  return merge(commonOptions, {\r\n    title: {\r\n      text: 'Comparison',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Net Worth difference',\r\n        data: netWorthDifferences.map(c => ({\r\n          x: c.unixTimeMs,\r\n          y: c.difference,\r\n        })),\r\n        color: colors.blue,\r\n      },\r\n      // ...mortgages.map((m, n) => ({\r\n      //   name: `${m.name} Net Worth`,\r\n      //   data: m.netWorth.map(nw => ({\r\n      //     x: nw.unixTimeMs,\r\n      //     y: nw.netWorth,\r\n      //   })),\r\n      //   color: colors.blues[n],\r\n      // })),\r\n    ],\r\n    // xAxis: {\r\n    //   plotLines: plotLines.concat(breakpointPlotLines),\r\n    // },\r\n    tooltip: {\r\n      valueDecimals: 0,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createCashEquityChartOptions = mortgages =>\r\n  merge(commonOptions, {\r\n    title: {\r\n      text: 'Cash & Equity',\r\n    },\r\n    series: [\r\n      ...mortgages.map((m, n) => ({\r\n        name: `Scenario ${m.id} Cash`,\r\n        data: m.netWorth.map(nw => ({\r\n          x: nw.unixTimeMs,\r\n          y: nw.cash,\r\n        })),\r\n        color: colors.teals[n],\r\n      })),\r\n      ...mortgages.map((m, n) => ({\r\n        name: `Scenario ${m.id} Equity`,\r\n        data: m.netWorth.map(nw => ({\r\n          x: nw.unixTimeMs,\r\n          y: nw.equity,\r\n        })),\r\n        color: colors.golds[n],\r\n      })),\r\n    ],\r\n    tooltip: {\r\n      valueDecimals: 0,\r\n    },\r\n  });\r\n\r\nexport const createInterestChartOptions = mortgages => ({\r\n  chart: {\r\n    type: 'column',\r\n  },\r\n  title: {\r\n    text: `Mortgage Interest By Year`,\r\n  },\r\n  plotOptions: {\r\n    column: {\r\n      groupPadding: 0,\r\n      pointPadding: 0,\r\n    },\r\n    series: {\r\n      states: {\r\n        inactive: {\r\n          enabled: false,\r\n        },\r\n        hover: false,\r\n      },\r\n    },\r\n  },\r\n  series: [\r\n    ...mortgages.map((m, n) => ({\r\n      name: `${m.name} Interest`,\r\n      data: m.interestByYear.map(i => ({\r\n        name: i.year,\r\n        y: i.interest,\r\n      })),\r\n      color: colors.reds[n],\r\n    })),\r\n  ],\r\n  xAxis: {\r\n    type: 'category',\r\n    categories: [\r\n      ...new Set(mortgages.map(m => m.interestByYear.map(i => i.year)).flat()),\r\n    ],\r\n  },\r\n  yAxis: {\r\n    title: {\r\n      text: null,\r\n    },\r\n    labels: {\r\n      format: yAxisLabelFormat,\r\n    },\r\n    plotLines: [\r\n      {\r\n        color: '#AAA',\r\n        width: 1,\r\n        value: 0,\r\n        zIndex: 2,\r\n      },\r\n    ],\r\n  },\r\n  tooltip: {\r\n    split: true,\r\n    valueDecimals: 0,\r\n    headerFormat: '{point.key}<br/>',\r\n    shared: true,\r\n    valuePrefix: '$',\r\n  },\r\n});\r\n\r\nexport const createBalanceChartOptions = mortgages =>\r\n  merge(commonOptions, {\r\n    title: {\r\n      text: `Mortgage Balances`,\r\n    },\r\n    series: [\r\n      ...mortgages.map((m, n) => ({\r\n        name: `${m.name} Balance`,\r\n        data: [\r\n          {\r\n            x: m.startDate.subtract(1, 'month').valueOf(),\r\n            y: m.loanAmount,\r\n          },\r\n          ...m.payments.map(payment => ({\r\n            x: payment.unixTimeMs,\r\n            y: payment.remainingBalance,\r\n          })),\r\n        ],\r\n        color: colors.purples[n],\r\n      })),\r\n    ],\r\n    tooltip: {\r\n      valueDecimals: 0,\r\n    },\r\n  });\r\n\r\nexport const createAmortizationChartOptions = mortgage =>\r\n  merge(commonOptions, {\r\n    chart: {\r\n      type: 'area',\r\n    },\r\n    title: {\r\n      text: `${mortgage.name} Amortization`,\r\n    },\r\n    plotOptions: {\r\n      area: {\r\n        stacking: 'normal',\r\n      },\r\n      series: {\r\n        fillOpacity: 0.15,\r\n      },\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Principal',\r\n        data: mortgage.payments.map(payment => ({\r\n          x: payment.unixTimeMs,\r\n          y: payment.principal,\r\n        })),\r\n        color: colors.green,\r\n      },\r\n      {\r\n        name: 'Interest',\r\n        data: mortgage.payments.map(payment => ({\r\n          x: payment.unixTimeMs,\r\n          y: payment.interest,\r\n        })),\r\n        color: colors.red,\r\n      },\r\n    ],\r\n    tooltip: {\r\n      valueDecimals: 2,\r\n    },\r\n  });\r\n","import { Divider, Table, TableBody, TableCell, TableRow } from '@mui/material';\r\nimport clone from 'clone';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Fragment, memo } from 'react';\r\nimport {\r\n  createAmortizationChartOptions,\r\n  createBalanceChartOptions,\r\n  createCashEquityChartOptions,\r\n  createComparisonChartOptions,\r\n  createInterestChartOptions,\r\n  setCommonOptions,\r\n} from './ChartOptions';\r\nimport { monthsPerYear } from './common/constants';\r\nimport IRSFilingStatus from './enum/IRSFilingStatus';\r\nimport MortgageTerm from './enum/MortgageTerm';\r\nimport MortgageType from './enum/MortgageType';\r\n\r\nconst moment = require('moment');\r\n\r\n// TCJA = Tax Cuts & Jobs Act of 2017\r\nconst tcjaBreakpoint = moment('2018-02-15', 'YYYY-MM-DD');\r\n\r\n/**\r\n * Convert annual rate to monthly rate (with monthly compounding).\r\n */\r\nconst calcMonthlyRoi = n => (1 + n) ** (1 / monthsPerYear) - 1;\r\n\r\n/** Round to n decimal places */\r\nconst roundTo = (n, num) => +`${Math.round(+`${num}e+${n}`)}e-${n}`;\r\nconst roundToTwo = num => roundTo(2, num);\r\n\r\n/**\r\n * Calculate monthly loan payment amount\r\n * @param {number} p Remaining principal for the loan.\r\n * @param {number} i Monthly interest rate.\r\n * @param {number} t Remaining months for the loan. (term)\r\n */\r\nconst calcMonthlyPayment = (p, i, t) => {\r\n  const x = (1 + i) ** t;\r\n  return roundToTwo((p * (i * x)) / (x - 1));\r\n};\r\n\r\nconst calcPerformanceRanges = netWorthDifferences => {\r\n  const ranges = [];\r\n  let isPositiveNow;\r\n  let prevIsPositive;\r\n  const firstDate = netWorthDifferences[0].date;\r\n  const lastDate = netWorthDifferences[netWorthDifferences.length - 1].date;\r\n  let prevDate = firstDate;\r\n  const pushResult = (startDate, endDate, isPositive) => {\r\n    ranges.push({\r\n      startDate,\r\n      endDate,\r\n      isPositive,\r\n    });\r\n    prevDate = endDate;\r\n  };\r\n  for (const nwd of netWorthDifferences) {\r\n    isPositiveNow = nwd.difference > 0;\r\n    const isZeroNow = nwd.difference === 0;\r\n    if (isPositiveNow !== prevIsPositive && prevIsPositive !== undefined) {\r\n      pushResult(prevDate, nwd.date, prevIsPositive);\r\n    }\r\n    prevIsPositive = isZeroNow ? undefined : isPositiveNow;\r\n  }\r\n  pushResult(prevDate, lastDate, prevIsPositive);\r\n  return ranges;\r\n};\r\n\r\nconst transformState = reportState => {\r\n  const data = clone(reportState);\r\n  data.roi /= 100;\r\n  data.monthlyRoi = calcMonthlyRoi(data.roi);\r\n  data.marginalTaxRate /= 100;\r\n  data.otherItemizedDeductions = +data.otherItemizedDeductions;\r\n  data.m1HomeAcquisitionDebt = +data.m1HomeAcquisitionDebt;\r\n  data.refiNewAcquisitionDebt = +data.refiNewAcquisitionDebt;\r\n  for (const m of data.mortgages) {\r\n    m.name = `Mortgage ${m.id}`;\r\n    m.interestRate /= 100;\r\n    m.loanAmount = +m.loanAmount;\r\n    m.termMonths = MortgageTerm.props[m.term].months;\r\n    m.endDate = m.startDate.clone().add(m.termMonths - 1, 'months');\r\n    if (m.type !== MortgageType.FixedRate) {\r\n      const years = MortgageType.props[m.type].yearsFixed;\r\n      const intRate = m.interestRateAdjusted / 100;\r\n      m.rateAdjust = {\r\n        interestRate: intRate,\r\n        monthlyInterestRate: intRate / monthsPerYear,\r\n        adjustDate: m.startDate.clone().add(years, 'years'),\r\n      };\r\n    }\r\n    m.monthlyInterestRate = m.interestRate / monthsPerYear;\r\n    m.monthlyPayment = calcMonthlyPayment(\r\n      m.loanAmount,\r\n      m.monthlyInterestRate,\r\n      m.termMonths\r\n    );\r\n    m.closingCosts = +m.closingCosts;\r\n    delete m.interestRateAdjusted;\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n/**\r\n * Builds amortization schedule for a mortgages, with each payment's principal\r\n * and interest portions.\r\n */\r\nconst createAmortizationSchedules = mortgages => {\r\n  for (const m of mortgages) {\r\n    let b = m.loanAmount;\r\n    let intRate = m.monthlyInterestRate;\r\n    const date = m.startDate.clone();\r\n    let { monthlyPayment } = m;\r\n    m.payments = [];\r\n    while (b > 0) {\r\n      const int = roundToTwo(b * intRate);\r\n      let prin;\r\n      // on the very last payment, pay off remaining balance due to rounding over time\r\n      if (date.isSame(m.endDate)) {\r\n        prin = b;\r\n      } else {\r\n        prin = roundToTwo(monthlyPayment - int);\r\n      }\r\n      const bStart = roundToTwo(b);\r\n      const bEnd = roundToTwo(bStart - prin);\r\n      b = bEnd;\r\n      const payment = {\r\n        principal: prin,\r\n        interest: int,\r\n        date: date.clone(),\r\n        unixTimeMs: date.valueOf(),\r\n        startingBalance: bStart,\r\n        remainingBalance: bEnd,\r\n      };\r\n      m.payments.push(payment);\r\n      date.add(1, 'month');\r\n      if (m.rateAdjust && date.isSame(m.rateAdjust.adjustDate)) {\r\n        intRate = m.rateAdjust.monthlyInterestRate;\r\n        const t =\r\n          m.termMonths - m.rateAdjust.adjustDate.diff(m.startDate, 'months');\r\n        monthlyPayment = calcMonthlyPayment(b, intRate, t);\r\n        m.rateAdjust.monthlyPayment = monthlyPayment;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Extrapolate past and future standard deductions as needed.\r\n */\r\nconst extendStandardDeductions = ({ m1, m2, irsFilingStatus }) => {\r\n  const percentChange = 3.25 / 100;\r\n  let startYear;\r\n  let endYear;\r\n\r\n  if (m1.startDate.isBefore(m2.startDate)) {\r\n    startYear = m1.startDate.year();\r\n  } else {\r\n    startYear = m2.startDate.year();\r\n  }\r\n  if (m1.endDate.isAfter(m2.endDate)) {\r\n    endYear = m1.endDate.year();\r\n  } else {\r\n    endYear = m2.endDate.year();\r\n  }\r\n  const stdDev = IRSFilingStatus.props[irsFilingStatus].standardDeduction;\r\n  const keys = Object.keys(stdDev);\r\n  const first = +keys[0];\r\n  const last = +keys.pop();\r\n  for (let i = first - 1; i >= startYear; i--) {\r\n    stdDev[i] = roundToTwo(stdDev[i + 1] / (1 + percentChange));\r\n  }\r\n  for (let i = last + 1; i <= endYear; i++) {\r\n    stdDev[i] = stdDev[i - 1];\r\n  }\r\n};\r\n\r\n/**\r\n * Caps home acquisition debt to a maximum amount which depends the mortgage's\r\n * start date and the IRS filing status.\r\n */\r\nconst capHomeAcquisitionDebt = (amount, startDate, irsFilingStatus) => {\r\n  let homeAcquisitionDebt;\r\n  if (startDate.isAfter(tcjaBreakpoint)) {\r\n    if (irsFilingStatus === IRSFilingStatus.MarriedFilingSeparately) {\r\n      homeAcquisitionDebt = Math.min(375000, amount);\r\n    } else {\r\n      homeAcquisitionDebt = Math.min(750000, amount);\r\n    }\r\n  } else {\r\n    if (irsFilingStatus === IRSFilingStatus.MarriedFilingSeparately) {\r\n      homeAcquisitionDebt = Math.min(500000, amount);\r\n    } else {\r\n      homeAcquisitionDebt = Math.min(1000000, amount);\r\n    }\r\n  }\r\n  return homeAcquisitionDebt;\r\n};\r\n\r\n/**\r\n * Assuming m1 and m2 will overlap payment dates, find the first m1 index where\r\n * they share the same date. Also, assume m1.startDate <= m2.startDate.\r\n */\r\nconst findFirstSharedPaymentDateIndex = ({ m1, m2 }) => {\r\n  let m1n = 0;\r\n  while (m1.payments[m1n] && !m1.payments[m1n].date.isSame(m2.startDate)) {\r\n    m1n++;\r\n    if (m1n === 1000)\r\n      throw new Error(\r\n        `Couldn't find intersecting payment dates between the two mortgages.`\r\n      );\r\n  }\r\n  return m1n;\r\n};\r\n\r\n/**\r\n * Calculate pro-rated interest for old lender, as well as prepaid per-diem\r\n * interest for the new lender.\r\n */\r\nconst calcProRatedInterestForRefi = ({ m1, m2, firstSharedM1Index }) => {\r\n  const priorMonthNdx = firstSharedM1Index - 1;\r\n  const priorMonthPayment = m1.payments[priorMonthNdx];\r\n  const refiClosingDayOfMonth = 15; // arbirarily chosen\r\n  const refiClosingDate = priorMonthPayment.date\r\n    .clone()\r\n    .date(refiClosingDayOfMonth);\r\n  const daysInMonth = refiClosingDate.daysInMonth();\r\n  m1.proRatedInterest = roundToTwo(\r\n    priorMonthPayment.interest * ((refiClosingDayOfMonth - 1) / daysInMonth)\r\n  );\r\n  m2.proRatedInterest = roundToTwo(\r\n    m2.payments[0].interest *\r\n      ((daysInMonth - refiClosingDayOfMonth + 1) / daysInMonth)\r\n  );\r\n};\r\n\r\n/**\r\n * Determine starting values for cash, equity, and home acquisition debt.\r\n */\r\nconst calcInitialCashEquityAndDebt = ({\r\n  isRefinance,\r\n  refiNewAcquisitionDebt,\r\n  irsFilingStatus,\r\n  m1,\r\n  m2,\r\n  firstSharedM1Index,\r\n  m1HomeAcquisitionDebt,\r\n}) => {\r\n  m1.initEquity = 0;\r\n\r\n  if (isRefinance) {\r\n    const priorMonthStartingBalance =\r\n      m1.payments[firstSharedM1Index - 1].startingBalance;\r\n    m1.initCash = 0;\r\n    m2.initCash = roundToTwo(\r\n      m2.loanAmount -\r\n        priorMonthStartingBalance -\r\n        m2.closingCosts -\r\n        m1.proRatedInterest -\r\n        m2.proRatedInterest\r\n    );\r\n    m2.initEquity = -roundToTwo(m2.loanAmount - priorMonthStartingBalance);\r\n    if (m1.startDate.isAfter(tcjaBreakpoint) && m1HomeAcquisitionDebt !== 0) {\r\n      m1.homeAcquisitionDebt = Math.min(m1HomeAcquisitionDebt, m1.loanAmount);\r\n    } else {\r\n      m1.homeAcquisitionDebt = m1.loanAmount;\r\n    }\r\n    let debt = m2.loanAmount;\r\n    if (m2.startDate.isAfter(tcjaBreakpoint))\r\n      debt =\r\n        Math.min(m1.homeAcquisitionDebt, priorMonthStartingBalance, debt) +\r\n        refiNewAcquisitionDebt;\r\n    m2.homeAcquisitionDebt = Math.min(roundToTwo(debt), m2.loanAmount);\r\n  } else {\r\n    const loanAmountDiff = m2.loanAmount - m1.loanAmount;\r\n    m1.initCash = -m1.closingCosts;\r\n    m2.initCash = loanAmountDiff - m2.closingCosts;\r\n    m2.initEquity = -loanAmountDiff;\r\n    m2.homeAcquisitionDebt = m2.loanAmount;\r\n  }\r\n\r\n  m1.homeAcquisitionDebt = capHomeAcquisitionDebt(\r\n    m1.homeAcquisitionDebt,\r\n    m1.startDate,\r\n    irsFilingStatus\r\n  );\r\n  m2.homeAcquisitionDebt = capHomeAcquisitionDebt(\r\n    m2.homeAcquisitionDebt,\r\n    m1.startDate, // using m1's startDate instead of m2 on purpose!\r\n    irsFilingStatus\r\n  );\r\n};\r\n\r\n/**\r\n * Inserts an additional data point before first payment date.\r\n */\r\nconst insertInitialPointBeforeStartDates = (m1, m2) => {\r\n  const m1NetWorth = m1.initCash + m1.initEquity;\r\n  const m2NetWorth = m2.initCash + m2.initEquity;\r\n  const date = m2.payments[0].date.clone().subtract(2, 'month');\r\n  const unixTimeMs = date.valueOf();\r\n  m1.netWorth = [];\r\n  m2.netWorth = [];\r\n  m1.netWorth.push({\r\n    date,\r\n    unixTimeMs,\r\n    cash: m1.initCash,\r\n    equity: m1.initEquity,\r\n    netWorth: m1NetWorth,\r\n  });\r\n  m2.netWorth.push({\r\n    date,\r\n    unixTimeMs,\r\n    cash: m2.initCash,\r\n    equity: m2.initEquity,\r\n    netWorth: m2NetWorth,\r\n  });\r\n};\r\n\r\n/**\r\n * Determine how much to offset monthly cash due to the benefits of\r\n * itemizing mortgage interest.\r\n */\r\nconst calcMonthlyNetGainFromItemizedInterest = (year, interestByYear) => {\r\n  const { itemizationNetGain, itemizablePeriods } = interestByYear.find(\r\n    x => x.year === year\r\n  );\r\n  const monthlyItemizationNetGain = roundToTwo(\r\n    itemizationNetGain / itemizablePeriods\r\n  );\r\n  return monthlyItemizationNetGain;\r\n};\r\n\r\n/**\r\n * Creates data for comparing cash, equity, and net worth comparisons of the two\r\n * mortgages over their life time.\r\n */\r\nconst compareMortgages = ({\r\n  m1,\r\n  m2,\r\n  doItemize,\r\n  monthlyRoi,\r\n  firstSharedM1Index,\r\n}) => {\r\n  insertInitialPointBeforeStartDates(m1, m2);\r\n\r\n  const calcNetWorthData = (m, initNdx) => {\r\n    let { monthlyPayment } = m;\r\n    let cash = m.initCash;\r\n    let prevCash = m.initCash;\r\n    let equity = m.initEquity;\r\n    let isFirstIteration = true;\r\n    for (let i = initNdx; i < m.payments.length; i++) {\r\n      let usingPrevPayment = false;\r\n      if (isFirstIteration && i > 0) {\r\n        usingPrevPayment = true;\r\n        i--;\r\n      }\r\n      const payment = m.payments[i];\r\n      const date = payment.date.clone();\r\n      let { unixTimeMs } = payment;\r\n      if (isFirstIteration && !usingPrevPayment) {\r\n        date.subtract(1, 'month');\r\n        unixTimeMs = date.valueOf();\r\n      }\r\n      if (m.rateAdjust && payment.date.isSame(m.rateAdjust.adjustDate))\r\n        monthlyPayment = m.rateAdjust.monthlyPayment;\r\n      const accruedInt = prevCash * monthlyRoi;\r\n      cash += accruedInt;\r\n      if (doItemize) {\r\n        cash += calcMonthlyNetGainFromItemizedInterest(\r\n          payment.date.year(),\r\n          m.interestByYear\r\n        );\r\n      }\r\n      // don't apply normal payment if first iteration, unless is\r\n      // prev payment from mortgage 1 in a refi\r\n      if (!isFirstIteration || usingPrevPayment) {\r\n        cash -= monthlyPayment;\r\n        equity += payment.principal;\r\n      }\r\n      const netWorth = roundToTwo(cash + equity);\r\n\r\n      cash = roundToTwo(cash);\r\n      m.netWorth.push({\r\n        date,\r\n        unixTimeMs,\r\n        cash,\r\n        equity,\r\n        netWorth,\r\n      });\r\n      prevCash = cash;\r\n      if (isFirstIteration && !usingPrevPayment) i--;\r\n      isFirstIteration = false;\r\n    }\r\n  };\r\n\r\n  calcNetWorthData(m1, firstSharedM1Index);\r\n  calcNetWorthData(m2, 0);\r\n\r\n  const netWorthDifferences = [];\r\n  for (let i = 0; i < Math.min(m1.netWorth.length, m2.netWorth.length); i++) {\r\n    netWorthDifferences.push({\r\n      date: m1.netWorth[i].date,\r\n      unixTimeMs: m1.netWorth[i].unixTimeMs,\r\n      difference: m2.netWorth[i].netWorth - m1.netWorth[i].netWorth,\r\n    });\r\n  }\r\n\r\n  return netWorthDifferences;\r\n};\r\n\r\n/**\r\n * Calculate mortgage interest for each year, including pro-rated interest\r\n * in the case of refinances. Also calculate itemized interest and net\r\n * benefit of it.\r\n */\r\nconst calcMortgageInterestByYear = ({\r\n  m1,\r\n  m2,\r\n  isRefinance,\r\n  doItemize,\r\n  firstSharedM1Index,\r\n  irsFilingStatus,\r\n  otherItemizedDeductions,\r\n  marginalTaxRate,\r\n}) => {\r\n  const pushResult = (\r\n    m,\r\n    year,\r\n    interest,\r\n    itemizableInterest,\r\n    itemizablePeriods\r\n  ) => {\r\n    m.interestByYear.push({\r\n      year,\r\n      interest: roundToTwo(interest),\r\n      itemizableInterest: roundToTwo(itemizableInterest),\r\n      itemizablePeriods,\r\n    });\r\n  };\r\n  const calcRatio = (homeAcquisitionDebt, startingBalance) =>\r\n    homeAcquisitionDebt < startingBalance\r\n      ? homeAcquisitionDebt / startingBalance\r\n      : 1;\r\n\r\n  for (const m of [m1, m2]) {\r\n    m.interestByYear = [];\r\n    let interest = 0;\r\n    let itemizableInterest = 0;\r\n    let itemizablePeriods = 0;\r\n    let isFirstYear = true;\r\n    let prevYear;\r\n    for (const p of m.payments) {\r\n      const year = p.date.year();\r\n      if (prevYear && prevYear !== year) {\r\n        // add 1 for the month between closing month and first mortgage payment\r\n        if (isFirstYear) {\r\n          itemizablePeriods++;\r\n          isFirstYear = false;\r\n        }\r\n        pushResult(\r\n          m,\r\n          prevYear,\r\n          interest,\r\n          itemizableInterest,\r\n          itemizablePeriods\r\n        );\r\n        interest = 0;\r\n        itemizableInterest = 0;\r\n      }\r\n      itemizablePeriods++;\r\n      interest += p.interest;\r\n      const ratio = calcRatio(m.homeAcquisitionDebt, p.startingBalance);\r\n      p.itemizableInterest = roundToTwo(p.interest * ratio);\r\n      itemizableInterest += p.itemizableInterest;\r\n      prevYear = year;\r\n    }\r\n    pushResult(m, prevYear, interest, itemizableInterest, itemizablePeriods);\r\n  }\r\n\r\n  // for refi's, determine partial year interest from m1. also,\r\n  // add pro-rated interest for old and new lender to total yearly interest\r\n  // totals\r\n  if (isRefinance) {\r\n    let m1n = firstSharedM1Index;\r\n    const refiYear = m1.payments[m1n].date.year();\r\n    let m1Interest = 0;\r\n    let m1ItemizableInterest = 0;\r\n    for (m1n -= 2; m1.payments[m1n].date.year() === refiYear; m1n--) {\r\n      m1Interest += m1.payments[m1n].interest;\r\n      m1ItemizableInterest += m1.payments[m1n].itemizableInterest;\r\n    }\r\n    const refiM1Ratio = calcRatio(m1.homeAcquisitionDebt, m2.loanAmount);\r\n    m2.interestByYear[0].m1Interest = roundToTwo(\r\n      m1Interest + m1.proRatedInterest\r\n    );\r\n    m2.interestByYear[0].m1ItemizableInterest =\r\n      m1ItemizableInterest + m1.proRatedInterest * refiM1Ratio;\r\n    const refiM2Ratio = calcRatio(m2.homeAcquisitionDebt, m2.loanAmount);\r\n    m2.interestByYear[0].interest = roundToTwo(\r\n      m2.interestByYear[0].interest + m2.proRatedInterest\r\n    );\r\n    m2.interestByYear[0].itemizableInterest = roundToTwo(\r\n      m2.interestByYear[0].itemizableInterest +\r\n        m1.proRatedInterest * refiM1Ratio +\r\n        m2.proRatedInterest * refiM2Ratio\r\n    );\r\n  }\r\n\r\n  // determine the net benefit of mortgage interest itemization for\r\n  // each year, taking into account other deductions\r\n  if (doItemize) {\r\n    const standarddDeductionData =\r\n      IRSFilingStatus.props[irsFilingStatus].standardDeduction;\r\n    for (const m of [m1, m2]) {\r\n      for (const i of m.interestByYear) {\r\n        const standardDeduction = standarddDeductionData[i.year];\r\n        i.itemizationNetGain = roundToTwo(\r\n          marginalTaxRate *\r\n            Math.max(\r\n              i.itemizableInterest -\r\n                Math.max(standardDeduction - otherItemizedDeductions, 0),\r\n              0\r\n            )\r\n        );\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction Report({ reportState }) {\r\n  const data = transformState(reportState);\r\n  [data.m1, data.m2] = data.mortgages;\r\n  extendStandardDeductions(data);\r\n  createAmortizationSchedules(data.mortgages);\r\n  data.firstSharedM1Index = findFirstSharedPaymentDateIndex(data);\r\n  if (data.isRefinance) calcProRatedInterestForRefi(data);\r\n  calcInitialCashEquityAndDebt(data);\r\n  calcMortgageInterestByYear(data);\r\n  data.netWorthDifferences = compareMortgages(data);\r\n\r\n  setCommonOptions(data);\r\n  data.performanceRanges = calcPerformanceRanges(data.netWorthDifferences);\r\n\r\n  const tableCellStyle = {\r\n    border: 0,\r\n    fontSize: 'initial',\r\n    padding: 0,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Divider variant=\"middle\" />\r\n      <br />\r\n      <br />\r\n      <Table\r\n        sx={{\r\n          width: 'fit-content',\r\n          '&.MuiTable-root': { m: 'auto' },\r\n        }}\r\n      >\r\n        <TableBody>\r\n          <TableRow>\r\n            <TableCell\r\n              sx={{\r\n                ...tableCellStyle,\r\n                verticalAlign: 'top',\r\n                whiteSpace: 'nowrap',\r\n              }}\r\n            >\r\n              Scenario 1:\r\n            </TableCell>\r\n            <TableCell sx={tableCellStyle}>\r\n              &nbsp;\r\n              {data.isRefinance\r\n                ? `You keep Mortgage 1 instead of refinancing.`\r\n                : `You purchase a home with Mortgage 1.`}\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell\r\n              sx={{\r\n                ...tableCellStyle,\r\n                verticalAlign: 'top',\r\n                whiteSpace: 'nowrap',\r\n              }}\r\n            >\r\n              Scenario 2:\r\n            </TableCell>\r\n            <TableCell sx={tableCellStyle}>\r\n              &nbsp;\r\n              {data.isRefinance\r\n                ? `You refinance Mortgage 1 with Mortgage 2.`\r\n                : `You purchase a home with Mortgage 2.`}\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n      <br />\r\n      {data.performanceRanges.map((range, n) => (\r\n        <Fragment key={n}>\r\n          From {range.startDate.format('MM-YYYY')} to{' '}\r\n          {range.endDate.format('MM-YYYY')}, Scenario {range.isPositive ? 2 : 1}{' '}\r\n          outperforms Scenario {range.isPositive ? 1 : 2}.\r\n          <br />\r\n        </Fragment>\r\n      ))}\r\n      <br />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={createComparisonChartOptions(data)}\r\n      />\r\n      <p>\r\n        The Comparison graph shows how Scenario 1 and Scenario 2 compare in\r\n        value over time in terms of Net Worth. Net Worth is defined here as Cash\r\n        plus Equity -- see below. The graph line values above are &quot;Scenario\r\n        2 Net Worth&quot; minus &quot;Scenario 1 Net Worth.&quot; So, if a\r\n        point&apos;s value is greater than $0, then Scenario 2 is outperforming\r\n        Scenario 1 at that time (taking into account past performance).\r\n        <br />\r\n        <br />\r\n        Note that you can zoom in on graphs by clicking and dragging. You also\r\n        can show/hide lines by clicking on their legend entries.\r\n      </p>\r\n      <br />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={createCashEquityChartOptions(data.mortgages)}\r\n      />\r\n      <p>\r\n        For each monthly mortgage payment made, Cash goes down by that amount.\r\n        Equity goes up by the principal portion of the payment. Cash has\r\n        additional value over time, as it can be invested. To account for the\r\n        time value of money, each month Cash is multiplied by a monthly ROI\r\n        value (which is derived from the yearly ROI value supplied above). If\r\n        Cash is positive, then this value is added to Cash. If Cash is negative,\r\n        then this value is an opportunity cost that gets subtracted from Cash.\r\n        <br />\r\n        <br />\r\n        If this scenario is a refinance, then the starting cash starts off\r\n        increased by the cash-out amount and equity starts off decreased by the\r\n        cash-out amount.\r\n        <br />\r\n      </p>\r\n      <br />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={createInterestChartOptions(data.mortgages)}\r\n      />\r\n      <p>\r\n        This graph shows the total mortgage interest paid in each calendar year.\r\n      </p>\r\n      <br />\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={createBalanceChartOptions(data.mortgages)}\r\n      />\r\n      <p>\r\n        This graph shows the outstanding mortgage balances decreasing over time.\r\n      </p>\r\n      {data.mortgages.map(m => (\r\n        <Fragment key={m.id}>\r\n          <br />\r\n          <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={createAmortizationChartOptions(m)}\r\n          />\r\n          <p>Amortization schedule for Mortgage {m.id}.</p>\r\n        </Fragment>\r\n      ))}\r\n      <br />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(Report);\r\n"],"names":["plotLines","commonOptions","moment","require","yAxisLabelFormat","colors","red","green","blue","gold","purple","teal","pink","grey","c","color","Color","lighten","hex","darken","Highcharts","lang","thousandsSep","setCommonOptions","m1","m2","minDate","min","startDate","clone","maxDate","max","endDate","padding","diff","subtract","add","calcMinMaxDates","arr","date","startOf","year","isBefore","push","width","value","valueOf","zIndex","makePlotLines","chart","type","zoomType","plotOptions","series","states","hover","lineWidthPlus","inactive","enabled","marker","radius","xAxis","minRange","yAxis","title","text","labels","format","tooltip","shared","split","crosshairs","xDateFormat","headerFormat","valuePrefix","createComparisonChartOptions","netWorthDifferences","breakpointPlotLines","ranges","performanceRanges","shift","range","dashStyle","merge","name","data","map","x","unixTimeMs","y","difference","valueDecimals","createInterestChartOptions","mortgages","column","groupPadding","pointPadding","m","n","interestByYear","i","interest","reds","categories","Set","flat","createBalanceChartOptions","loanAmount","payments","payment","remainingBalance","purples","tcjaBreakpoint","roundToTwo","num","Math","round","roundTo","calcMonthlyPayment","p","t","transformState","reportState","roi","monthlyRoi","monthsPerYear","marginalTaxRate","otherItemizedDeductions","m1HomeAcquisitionDebt","refiNewAcquisitionDebt","id","interestRate","termMonths","MortgageTerm","term","months","MortgageType","years","yearsFixed","intRate","interestRateAdjusted","rateAdjust","monthlyInterestRate","adjustDate","monthlyPayment","closingCosts","capHomeAcquisitionDebt","amount","irsFilingStatus","isAfter","IRSFilingStatus","calcMonthlyNetGainFromItemizedInterest","find","itemizationNetGain","itemizablePeriods","Report","startYear","endYear","stdDev","standardDeduction","keys","Object","first","last","pop","extendStandardDeductions","b","int","prin","isSame","bStart","bEnd","principal","startingBalance","createAmortizationSchedules","firstSharedM1Index","m1n","Error","findFirstSharedPaymentDateIndex","isRefinance","priorMonthNdx","priorMonthPayment","daysInMonth","proRatedInterest","calcProRatedInterestForRefi","initEquity","priorMonthStartingBalance","initCash","homeAcquisitionDebt","debt","loanAmountDiff","calcInitialCashEquityAndDebt","doItemize","pushResult","itemizableInterest","calcRatio","isFirstYear","prevYear","ratio","refiYear","m1Interest","m1ItemizableInterest","refiM1Ratio","refiM2Ratio","standarddDeductionData","calcMortgageInterestByYear","m1NetWorth","m2NetWorth","netWorth","cash","equity","insertInitialPointBeforeStartDates","calcNetWorthData","initNdx","prevCash","isFirstIteration","length","usingPrevPayment","compareMortgages","isPositiveNow","prevIsPositive","firstDate","lastDate","prevDate","isPositive","nwd","isZeroNow","undefined","calcPerformanceRanges","tableCellStyle","border","fontSize","Divider","variant","Table","sx","TableBody","TableRow","TableCell","verticalAlign","whiteSpace","Fragment","highcharts","options","nw","teals","golds","mortgage","area","stacking","fillOpacity","memo"],"sourceRoot":""}